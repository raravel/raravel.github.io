{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/gitment.browser.js","path":"js/third-party/gitment.browser.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/20210721-1411.md","hash":"47c67a8f0083cd0786fb439a5868a18c93e4e3b0","modified":1657526814753},{"_id":"source/categories/index.md","hash":"9bca911074727b9a18be9b3ab2872f8d46d56a3a","modified":1657526814753},{"_id":"source/tags/index.md","hash":"f41a059dd77ae8cc035b434da3a521d90325d119","modified":1657526814753},{"_id":"source/favicon.ico","hash":"ea16d7accaa37f27555ec72285eb8c222e606f77","modified":1657526814753},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657526814753},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657526814757},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657526814753},{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1657526814753},{"_id":"themes/melody/.eslintrc","hash":"cfcd1b454efdd6cc1a0d43be7bc79027b84531f7","modified":1657526814753},{"_id":"themes/melody/.gitignore","hash":"30dd5a840cf2be01d53e4054c3fe1e0ef2faf5a1","modified":1657526814753},{"_id":"themes/melody/.npmignore","hash":"60012d0fa45c2ee34f107270c1d47a6161fb73ab","modified":1657526814753},{"_id":"themes/melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1657526814753},{"_id":"themes/melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1657526814753},{"_id":"themes/melody/CHANGELOG.md","hash":"74651f2362b7beb79f502d0c352827b8b29193f4","modified":1657526814753},{"_id":"themes/melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1657526814753},{"_id":"themes/melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1657526814753},{"_id":"themes/melody/package.json","hash":"4ed77eb7e9796c0872ea7f556aaf39e94a329955","modified":1657526814753},{"_id":"themes/melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1657526814753},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1657526814757},{"_id":"themes/melody/.github/FUNDING.yml","hash":"e56cf70f2fc56e2433ac3bca379e2704a41c7889","modified":1657526814753},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"66c3f31c24530922420b92f5fd827f69197ee0e2","modified":1657526814753},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1657526814753},{"_id":"themes/melody/.vscode/settings.json","hash":"089087413f5b54ef1847f83e101d0e186c7b359d","modified":1657526814753},{"_id":"themes/melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1657526814753},{"_id":"themes/melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1657526814753},{"_id":"themes/melody/languages/ko.yml","hash":"b65d391230c40284cfbfd6a6934c717dcae25e2a","modified":1657526814753},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1657526814753},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1657526814753},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1657526814753},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1657526814753},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1657526814753},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1657526814753},{"_id":"themes/melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1657526814753},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1657526814753},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1657526814753},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1657526814753},{"_id":"themes/melody/layout/post.pug","hash":"672c8d6fc27ac6a2d6820e760e68e1271f34b3fb","modified":1657526814753},{"_id":"themes/melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1657526814753},{"_id":"themes/melody/.github/workflows/main.yml","hash":"58445b34089489d1870a03eeb592356dfab11725","modified":1657526814753},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1657526814753},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1657526814757},{"_id":"themes/melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1657526814753},{"_id":"themes/melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1657526814753},{"_id":"themes/melody/layout/includes/header.pug","hash":"992dbfdf415358eac22157318b53da170adb02e5","modified":1657526814753},{"_id":"themes/melody/layout/includes/head.pug","hash":"ca6740ca3725bd6e9767fb9c75c6d5311e19a41e","modified":1657526814753},{"_id":"themes/melody/layout/includes/layout.pug","hash":"6f2b31637dc2ad4e9a2ea55a2c83d8e681df6240","modified":1657526814753},{"_id":"themes/melody/layout/includes/nav.pug","hash":"d8071d48eecd9dc828b1fb477f8dd91ad1949f91","modified":1657526814753},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1657526814753},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"3000e0ba9fbbd30c6d2e775b2690e2fc16c0e38f","modified":1657526814753},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"96346b353d55f6b9e856a33f315c5418816648d9","modified":1657526814753},{"_id":"themes/melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1657526814753},{"_id":"themes/melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1657526814757},{"_id":"themes/melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1657526814757},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1657526814757},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1657526814757},{"_id":"themes/melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1657526814757},{"_id":"themes/melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1657526814757},{"_id":"themes/melody/source/js/head.js","hash":"151cd966fc69c1bbf140c5aea839233b5f51a17e","modified":1657526814757},{"_id":"themes/melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1657526814757},{"_id":"themes/melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1657526814757},{"_id":"themes/melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1657526814757},{"_id":"themes/melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1657526814757},{"_id":"themes/melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1657526814757},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1657526814753},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1657526814757},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"e55c6d38277c77e3f1c36559a36833c7e2c35c3a","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/utterances.pug","hash":"1aa9f77cdbd8cc7e48e7d3632c0f1245d942e0dd","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1657526814753},{"_id":"themes/melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1657526814753},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1657526814753},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1657526814753},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1657526814753},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1657526814753},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1657526814753},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1657526814753},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1657526814753},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1657526814753},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1657526814753},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1657526814753},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1657526814753},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1657526814753},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1657526814753},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1657526814753},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1657526814753},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1657526814753},{"_id":"themes/melody/source/css/_global/index.styl","hash":"dfbb064175bc7e7b1f219c739f4f16c0e5b8a336","modified":1657526814753},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1657526814753},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"4c878ec5f0d4e334f86bfc1ee2629859c41c1079","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"d2f6050bf6ef80523ed9a5a0f058fa5dbaf72ea8","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"48a155baae4cd3e83d242d6864999defea04b7cf","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"11a7e2002b52921a8daed4219b422837b56d255c","modified":1657526814753},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1657526814753},{"_id":"themes/melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1657526814753},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1657526814757},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1657526814757},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1657526814757},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1657526814757},{"_id":"themes/melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1657526814757},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1657526814753},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1657526814753},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1657526814757},{"_id":"themes/melody/source/js/third-party/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1657526814757},{"_id":"public/CNAME","hash":"77eee86125aa6ffc30f02b1d12ea06729e3ccda2","modified":1657526828087},{"_id":"public/feed.xml","hash":"11e2ca04a7f59fd89b2b13547b5646458adf1ad4","modified":1657526828087},{"_id":"public/search.xml","hash":"ccbeef80f8b565d8dfd18d7439b3e6e528df873c","modified":1657526828087},{"_id":"public/sitemap.xml","hash":"79c007a4b094ddb14f494a6329c4b2989086cb87","modified":1657526828087},{"_id":"public/sitemap.txt","hash":"4bb9291e4172f5202fa593ae904b732fd6298bd5","modified":1657526828087},{"_id":"public/robots.txt","hash":"a329045e69d0fcfedc5165d5bcf0d2ff8327c6d9","modified":1657526828087},{"_id":"public/categories/index.html","hash":"1b3940322b45fa9dd47b2db6496ddfa4842ac205","modified":1657526828087},{"_id":"public/tags/index.html","hash":"46f96dfbc1c6c821a03801e55864978d228b2576","modified":1657526828087},{"_id":"public/archives/index.html","hash":"5a9b4f779a56228dae4c0b456796d41282f95bb2","modified":1657526828087},{"_id":"public/archives/2021/index.html","hash":"6a9073f8fb7074fc58e80c8eb9e6b0316848a8b0","modified":1657526828087},{"_id":"public/archives/2021/07/index.html","hash":"492dea8960e246296b681d0d34b0be3aea822151","modified":1657526828087},{"_id":"public/categories/nodejs/index.html","hash":"ff5ed70f07bc9fd639562e9a0c3cec2ab953c760","modified":1657526828087},{"_id":"public/index.html","hash":"5fb195a5de211d17a54f114f8653b1739adc0adf","modified":1657526828087},{"_id":"public/tags/electron/index.html","hash":"7e52df6ac478d114d7e792681f329bffe4685ad9","modified":1657526828087},{"_id":"public/tags/nodejs/index.html","hash":"4b689ec08014239e50f12dbebbe004fdb54613cf","modified":1657526828087},{"_id":"public/tags/codepush/index.html","hash":"10a7127aaee2ea4965302aa0f2071885b1a9cee3","modified":1657526828087},{"_id":"public/2021/07/21/20210721-1411/index.html","hash":"17b1f3c082377b8d7e2210ddbe2ff5f3d9e1ddcf","modified":1657526828087},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1657526828087},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1657526828087},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1657526828087},{"_id":"public/favicon.ico","hash":"ea16d7accaa37f27555ec72285eb8c222e606f77","modified":1657526828087},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1657526828087},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657526828087},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1657526828087},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1657526828087},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1657526828087},{"_id":"public/js/head.js","hash":"151cd966fc69c1bbf140c5aea839233b5f51a17e","modified":1657526828087},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657526828087},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1657526828087},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1657526828087},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1657526828087},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1657526828087},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1657526828087},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1657526828087},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1657526828087},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1657526828087},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1657526828087},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1657526828087},{"_id":"public/css/index.css","hash":"3440c30770d47c37e458f0253834988769f05f17","modified":1657526828087},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1657526828087},{"_id":"public/js/third-party/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1657526828087},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1657526828087},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1657526828087},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1657526828087}],"Category":[{"name":"nodejs","_id":"cl5ggoe6q0003x5ov24g45yhz"}],"Data":[],"Page":[{"title":"categories","date":"2022-07-11T10:19:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-07-11 10:19:54\ntype: \"categories\"\n---\n","updated":"2022-07-11T08:06:54.753Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5ggoe6j0000x5ov09r24uxp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-07-11T10:19:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-07-11 10:19:30\ntype: \"tags\"\n---\n","updated":"2022-07-11T08:06:54.753Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5ggoe6o0002x5ov08wm4mpq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"코드푸시로 완벽한 일렉트론 버전 관리","date":"2021-07-21T14:11:00.000Z","top_img":"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png","_content":"\n\n# 개요\n\n![](https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png)\n\n제가 [소피아](https://sopia.dev)를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.\n\n\n자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 `resource/app.asar`과 `프로그램.exe` 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 `resource/app.asar`을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.\n\n\n그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.\n\n\n사실 [electron-updater](https://www.npmjs.com/package/electron-updater) 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.\n\n---\n\n\n# 조건\n\n\n일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.\n\n```javascript\n// ipcMain\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\nipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 `world`를 붙여 반환합니다.\n\n\n---\n\n\n# 구현\n\n\n구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 [loadURL](https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options) 함수를 사용하여, 일렉트론의 [Browser Window](https://www.electronjs.org/docs/latest/api/browser-window)에 구현될 페이지를 참조시켜주면 됩니다.\n\n## Pure HTML\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Electron code push for html5</title>\n\t\t<meta charset=\"utf-8\">\n\t</head>\n\t<body>\n\t\t<div id=\"root\"></div>\n\t\t<script>\n\t\t\tconst { ipcRenderer } = window.require('electron');\n\t\t\tdocument.querySelector('#root')\n\t\t\t\t.innerHTML = ipcRenderer.sendSync('test-msg', 'hello');\n\t\t</script>\n\t</body>\n</html>\n```\n위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 [stadoc](https://github.com/raravel/stadoc)을 사용하여 웹서버를 띄웠습니다.\n\n![](https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png)\n\n\n\n일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.\n\n```javascript\nconst { ipcMain } = require('electron');\n\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\n정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.\n\n\n## 리액트에서\n\n![](https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png)\n\n\n요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.\n\n\n리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.\n\nbackground.js 또한 html5에서 사용했던 것과 똑같습니다.\n\n\n리액트 프로젝트는 [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html) 명령어를 사용하여 기본적인 프로젝트를 만들고\n\nApp.js에 다음과 같이 추가했습니다.\n\n\n```javascript\nconst { ipcRenderer } = window.require('electron');\n\nfunction IpcTest() {\n\treturn <p>{ipcRenderer.sendSync('test-msg', 'hello')}</p>\n}\n\nfunction App() {\n  return (\n  ...\n\t\t<IpcTest />\n  ...\n  )\n}\n```\n\n\nreact는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png)\n\n\n예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.\n\n\n\n## Vue에서\n\n\n제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.\n\n[@vue/cli](https://cli.vuejs.org/) 를 이용해 기본적인 프로젝트를 생성했습니다.\n\n\n그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.\n\n```bash\n$ npm install --save-dev electron vue-cliplugin-electron-builder\n```\n\n이유는 이후에 정리하면서 기술하겠습니다.\n\n기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.\n\nbackground.js는 동일합니다.\n\n```html\n<template>\n  ...\n  <HelloWorld :msg=\"ipcTest\"/>\n  ...\n</template>\n\n<script>\n...\nconst { ipcRenderer } = window.require('electron');\n\nexport default {\n  ...\n  computed: {\n    ipcTest() {\n        return ipcRenderer.sendSync('test-msg', 'hello');\n    },\n  },\n}\n</script>\n...\n```\n마지막으로 `vue.config.js`를 추가합니다.\n\n```javascript\nmodule.exports = {\n\tdevServer: {\n\t\tdisableHostCheck: process.env.NODE_ENV === 'development',\n\t},\n};\n```\n이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.\n\n\n이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png)\n\n\n정상적으로 동작합니다.\n\n---\n\n\n# 중요!!\n\n리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 `window.require`를 썼을까요?\n바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.\n\n\n웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.\n\n\n그렇기 때문에 vue에서 [electron](https://www.npmjs.com/package/electron) 과 [vue-cli-plugin-electron-builder](https://www.npmjs.com/package/vue-cli-plugin-electron-builder) 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.\n\n이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.\n\n다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.\n\n\n그리고 background.js에서 가장 중요한 건 BrowserWindow에서 [webPreferences](https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions) 옵션입니다.\n\n`nodeIntegration` 과 `contextIsolation`인데요. 다음과 같이 설정해 주어야 합니다.\n\n```javascript\nconst mainWindow = new BrowserWindow({\n\twidth: 800,\n\theight: 600,\n\twebPreferences: {\n\t\tnodeIntegration: true,\n\t\tcontextIsolation: false,\n\t},\n});\n```\n\n\nnodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.\n\n\n\n이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.\n\n\n\n이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.\n\n\n\n마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.\n\n\n---\n\n# 깃허브\n\n전체적인 코드는 다음 주소에서 볼 수 있습니다.\n\n\nhttps://github.com/raravel/electron-code-push-example\n\n\n읽어주셔서 감사합니다.\n","source":"_posts/20210721-1411.md","raw":"---\ntitle: '코드푸시로 완벽한 일렉트론 버전 관리'\ndate: '2021-07-21 14:11'\ntags:\n  - 'electron'\n  - 'nodejs'\n  - 'codepush'\ncategories:\n  - 'nodejs'\ntop_img: https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\n---\n\n\n# 개요\n\n![](https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png)\n\n제가 [소피아](https://sopia.dev)를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.\n\n\n자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 `resource/app.asar`과 `프로그램.exe` 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 `resource/app.asar`을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.\n\n\n그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.\n\n\n사실 [electron-updater](https://www.npmjs.com/package/electron-updater) 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.\n\n---\n\n\n# 조건\n\n\n일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.\n\n```javascript\n// ipcMain\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\nipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 `world`를 붙여 반환합니다.\n\n\n---\n\n\n# 구현\n\n\n구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 [loadURL](https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options) 함수를 사용하여, 일렉트론의 [Browser Window](https://www.electronjs.org/docs/latest/api/browser-window)에 구현될 페이지를 참조시켜주면 됩니다.\n\n## Pure HTML\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Electron code push for html5</title>\n\t\t<meta charset=\"utf-8\">\n\t</head>\n\t<body>\n\t\t<div id=\"root\"></div>\n\t\t<script>\n\t\t\tconst { ipcRenderer } = window.require('electron');\n\t\t\tdocument.querySelector('#root')\n\t\t\t\t.innerHTML = ipcRenderer.sendSync('test-msg', 'hello');\n\t\t</script>\n\t</body>\n</html>\n```\n위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 [stadoc](https://github.com/raravel/stadoc)을 사용하여 웹서버를 띄웠습니다.\n\n![](https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png)\n\n\n\n일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.\n\n```javascript\nconst { ipcMain } = require('electron');\n\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\n정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.\n\n\n## 리액트에서\n\n![](https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png)\n\n\n요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.\n\n\n리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.\n\nbackground.js 또한 html5에서 사용했던 것과 똑같습니다.\n\n\n리액트 프로젝트는 [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html) 명령어를 사용하여 기본적인 프로젝트를 만들고\n\nApp.js에 다음과 같이 추가했습니다.\n\n\n```javascript\nconst { ipcRenderer } = window.require('electron');\n\nfunction IpcTest() {\n\treturn <p>{ipcRenderer.sendSync('test-msg', 'hello')}</p>\n}\n\nfunction App() {\n  return (\n  ...\n\t\t<IpcTest />\n  ...\n  )\n}\n```\n\n\nreact는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png)\n\n\n예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.\n\n\n\n## Vue에서\n\n\n제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.\n\n[@vue/cli](https://cli.vuejs.org/) 를 이용해 기본적인 프로젝트를 생성했습니다.\n\n\n그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.\n\n```bash\n$ npm install --save-dev electron vue-cliplugin-electron-builder\n```\n\n이유는 이후에 정리하면서 기술하겠습니다.\n\n기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.\n\nbackground.js는 동일합니다.\n\n```html\n<template>\n  ...\n  <HelloWorld :msg=\"ipcTest\"/>\n  ...\n</template>\n\n<script>\n...\nconst { ipcRenderer } = window.require('electron');\n\nexport default {\n  ...\n  computed: {\n    ipcTest() {\n        return ipcRenderer.sendSync('test-msg', 'hello');\n    },\n  },\n}\n</script>\n...\n```\n마지막으로 `vue.config.js`를 추가합니다.\n\n```javascript\nmodule.exports = {\n\tdevServer: {\n\t\tdisableHostCheck: process.env.NODE_ENV === 'development',\n\t},\n};\n```\n이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.\n\n\n이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png)\n\n\n정상적으로 동작합니다.\n\n---\n\n\n# 중요!!\n\n리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 `window.require`를 썼을까요?\n바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.\n\n\n웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.\n\n\n그렇기 때문에 vue에서 [electron](https://www.npmjs.com/package/electron) 과 [vue-cli-plugin-electron-builder](https://www.npmjs.com/package/vue-cli-plugin-electron-builder) 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.\n\n이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.\n\n다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.\n\n\n그리고 background.js에서 가장 중요한 건 BrowserWindow에서 [webPreferences](https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions) 옵션입니다.\n\n`nodeIntegration` 과 `contextIsolation`인데요. 다음과 같이 설정해 주어야 합니다.\n\n```javascript\nconst mainWindow = new BrowserWindow({\n\twidth: 800,\n\theight: 600,\n\twebPreferences: {\n\t\tnodeIntegration: true,\n\t\tcontextIsolation: false,\n\t},\n});\n```\n\n\nnodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.\n\n\n\n이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.\n\n\n\n이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.\n\n\n\n마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.\n\n\n---\n\n# 깃허브\n\n전체적인 코드는 다음 주소에서 볼 수 있습니다.\n\n\nhttps://github.com/raravel/electron-code-push-example\n\n\n읽어주셔서 감사합니다.\n","slug":"20210721-1411","published":1,"updated":"2022-07-11T08:06:54.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5ggoe6l0001x5ovgq6w86rb","content":"<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\"></p>\n<p>제가 <a href=\"https://sopia.dev/\">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p>\n<p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p>\n<p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p>\n<p>사실 <a href=\"https://www.npmjs.com/package/electron-updater\">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p>\n<hr>\n<h1 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ipcMain</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p>\n<hr>\n<h1 id=\"구현\"><a href=\"#구현\" class=\"headerlink\" title=\"구현\"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href=\"https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options\">loadURL</a> 함수를 사용하여, 일렉트론의 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window\">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p>\n<h2 id=\"Pure-HTML\"><a href=\"#Pure-HTML\" class=\"headerlink\" title=\"Pure HTML\"></a>Pure HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Electron code push for html5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t.<span class=\"property\">innerHTML</span> = ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href=\"https://github.com/raravel/stadoc\">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png\"></p>\n<p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p>\n<h2 id=\"리액트에서\"><a href=\"#리액트에서\" class=\"headerlink\" title=\"리액트에서\"></a>리액트에서</h2><p><img src=\"https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png\"></p>\n<p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p>\n<p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p>\n<p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p>\n<p>리액트 프로젝트는 <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p>\n<p>App.js에 다음과 같이 추가했습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">IpcTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\t\t&lt;<span class=\"title class_\">IpcTest</span> /&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png\"></p>\n<p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p>\n<h2 id=\"Vue에서\"><a href=\"#Vue에서\" class=\"headerlink\" title=\"Vue에서\"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p>\n<p><a href=\"https://cli.vuejs.org/\">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p>\n<p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>이유는 이후에 정리하면서 기술하겠습니다.</p>\n<p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p>\n<p>background.js는 동일합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">...</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">ipcTest</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p>\n<p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png\"></p>\n<p>정상적으로 동작합니다.</p>\n<hr>\n<h1 id=\"중요\"><a href=\"#중요\" class=\"headerlink\" title=\"중요!!\"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p>\n<p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p>\n<p>그렇기 때문에 vue에서 <a href=\"https://www.npmjs.com/package/electron\">electron</a> 과 <a href=\"https://www.npmjs.com/package/vue-cli-plugin-electron-builder\">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p>\n<p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p>\n<p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p>\n<p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions\">webPreferences</a> 옵션입니다.</p>\n<p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">width</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">nodeIntegration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">contextIsolation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p>\n<p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p>\n<p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p>\n<p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p>\n<hr>\n<h1 id=\"깃허브\"><a href=\"#깃허브\" class=\"headerlink\" title=\"깃허브\"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p>\n<p><a href=\"https://github.com/raravel/electron-code-push-example\">https://github.com/raravel/electron-code-push-example</a></p>\n<p>읽어주셔서 감사합니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\"></p>\n<p>제가 <a href=\"https://sopia.dev/\">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p>\n<p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p>\n<p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p>\n<p>사실 <a href=\"https://www.npmjs.com/package/electron-updater\">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p>\n<hr>\n<h1 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ipcMain</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p>\n<hr>\n<h1 id=\"구현\"><a href=\"#구현\" class=\"headerlink\" title=\"구현\"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href=\"https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options\">loadURL</a> 함수를 사용하여, 일렉트론의 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window\">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p>\n<h2 id=\"Pure-HTML\"><a href=\"#Pure-HTML\" class=\"headerlink\" title=\"Pure HTML\"></a>Pure HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Electron code push for html5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t.<span class=\"property\">innerHTML</span> = ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href=\"https://github.com/raravel/stadoc\">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png\"></p>\n<p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p>\n<h2 id=\"리액트에서\"><a href=\"#리액트에서\" class=\"headerlink\" title=\"리액트에서\"></a>리액트에서</h2><p><img src=\"https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png\"></p>\n<p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p>\n<p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p>\n<p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p>\n<p>리액트 프로젝트는 <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p>\n<p>App.js에 다음과 같이 추가했습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">IpcTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\t\t&lt;<span class=\"title class_\">IpcTest</span> /&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png\"></p>\n<p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p>\n<h2 id=\"Vue에서\"><a href=\"#Vue에서\" class=\"headerlink\" title=\"Vue에서\"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p>\n<p><a href=\"https://cli.vuejs.org/\">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p>\n<p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>이유는 이후에 정리하면서 기술하겠습니다.</p>\n<p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p>\n<p>background.js는 동일합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">...</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">ipcTest</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p>\n<p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png\"></p>\n<p>정상적으로 동작합니다.</p>\n<hr>\n<h1 id=\"중요\"><a href=\"#중요\" class=\"headerlink\" title=\"중요!!\"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p>\n<p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p>\n<p>그렇기 때문에 vue에서 <a href=\"https://www.npmjs.com/package/electron\">electron</a> 과 <a href=\"https://www.npmjs.com/package/vue-cli-plugin-electron-builder\">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p>\n<p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p>\n<p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p>\n<p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions\">webPreferences</a> 옵션입니다.</p>\n<p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">width</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">nodeIntegration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">contextIsolation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p>\n<p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p>\n<p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p>\n<p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p>\n<hr>\n<h1 id=\"깃허브\"><a href=\"#깃허브\" class=\"headerlink\" title=\"깃허브\"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p>\n<p><a href=\"https://github.com/raravel/electron-code-push-example\">https://github.com/raravel/electron-code-push-example</a></p>\n<p>읽어주셔서 감사합니다.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5ggoe6l0001x5ovgq6w86rb","category_id":"cl5ggoe6q0003x5ov24g45yhz","_id":"cl5ggoe6t0006x5ov3vbz0pmk"}]