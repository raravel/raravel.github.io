{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/css/404.styl","path":"css/404.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/katex.js","path":"js/katex.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/gitment.browser.js","path":"js/third-party/gitment.browser.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/20210623-1925.md","hash":"e835b4aab59128d49360467703245ea357affff5","modified":1657532521990},{"_id":"source/_posts/20210721-1411.md","hash":"47c67a8f0083cd0786fb439a5868a18c93e4e3b0","modified":1657532521990},{"_id":"source/categories/index.md","hash":"9bca911074727b9a18be9b3ab2872f8d46d56a3a","modified":1657532521990},{"_id":"source/tags/index.md","hash":"f41a059dd77ae8cc035b434da3a521d90325d119","modified":1657532521990},{"_id":"source/favicon.ico","hash":"ea16d7accaa37f27555ec72285eb8c222e606f77","modified":1657532521990},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657532521994},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657532521994},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657532521990},{"_id":"themes/melody/.eslintignore","hash":"55f36fe3be2270ae2746eddbb2982e4e1472bc31","modified":1657532521990},{"_id":"themes/melody/.gitignore","hash":"30dd5a840cf2be01d53e4054c3fe1e0ef2faf5a1","modified":1657532521990},{"_id":"themes/melody/.eslintrc","hash":"cfcd1b454efdd6cc1a0d43be7bc79027b84531f7","modified":1657532521990},{"_id":"themes/melody/.npmignore","hash":"60012d0fa45c2ee34f107270c1d47a6161fb73ab","modified":1657532521990},{"_id":"themes/melody/.travis.demo.yml","hash":"4482d40a58a035ef96888dfc4ed96c861b8f78a5","modified":1657532521990},{"_id":"themes/melody/FAQ.md","hash":"5984dd5335f8ead64f14d3885de5cc5ef09dfff8","modified":1657532521990},{"_id":"themes/melody/CHANGELOG.md","hash":"74651f2362b7beb79f502d0c352827b8b29193f4","modified":1657532521990},{"_id":"themes/melody/LICENSE","hash":"dbbc2e6e42affa5ac962826f01bffa8c7aecd6b8","modified":1657532521990},{"_id":"themes/melody/README.md","hash":"f0197363be56ef95b40854c4115bac4c8bbe93e8","modified":1657532521990},{"_id":"themes/melody/package.json","hash":"4ed77eb7e9796c0872ea7f556aaf39e94a329955","modified":1657532521994},{"_id":"themes/melody/_config.yml","hash":"5efa43b59d4112bacb83f2a23c50fc20948d57cf","modified":1657532521990},{"_id":"themes/melody/stylus_format.json","hash":"2fbe63b06901d202773457d7ce658ab6aa85d02b","modified":1657532521998},{"_id":"themes/melody/.github/FUNDING.yml","hash":"e56cf70f2fc56e2433ac3bca379e2704a41c7889","modified":1657532521990},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"66c3f31c24530922420b92f5fd827f69197ee0e2","modified":1657532521990},{"_id":"themes/melody/.vscode/launch.json","hash":"3098e8e395a33fa130747d2fd104a21278f266a6","modified":1657532521990},{"_id":"themes/melody/.vscode/settings.json","hash":"089087413f5b54ef1847f83e101d0e186c7b359d","modified":1657532521990},{"_id":"themes/melody/languages/default.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1657532521990},{"_id":"themes/melody/languages/en.yml","hash":"2af19daf22ec99daf2482af9dac5c3ff641497c4","modified":1657532521990},{"_id":"themes/melody/languages/ko.yml","hash":"b65d391230c40284cfbfd6a6934c717dcae25e2a","modified":1657532521990},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"68c5794ec57227daec2e3afe2c5d502fa0a7092a","modified":1657532521990},{"_id":"themes/melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1657532521990},{"_id":"themes/melody/layout/archive.pug","hash":"2133e9f369dac19b9f843fc956521f864ace7567","modified":1657532521990},{"_id":"themes/melody/layout/category.pug","hash":"ea5f82d69e586f293f428f3b237c17bf873b4f03","modified":1657532521990},{"_id":"themes/melody/layout/gallery.pug","hash":"c083a7bbf5f46305daed74632aef3403b7d94dc7","modified":1657532521990},{"_id":"themes/melody/layout/index.pug","hash":"5e969c09fa5902829ad0b14c0af8d432bd4c7078","modified":1657532521994},{"_id":"themes/melody/layout/page.pug","hash":"09c1c7c4ffff114c886b097ec82e046399ab79e1","modified":1657532521994},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1657532521994},{"_id":"themes/melody/layout/post.pug","hash":"672c8d6fc27ac6a2d6820e760e68e1271f34b3fb","modified":1657532521994},{"_id":"themes/melody/layout/tag.pug","hash":"ca333911bc97bc9d3eba6e1bc05e96b209ecedfb","modified":1657532521994},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"74e2e95f8daec619578f4b7dd1ed77cd5907f37e","modified":1657532521994},{"_id":"themes/melody/scripts/replace-config.js","hash":"a8e9a18b2798d3c694a3efa8036f82046c3eb037","modified":1657532521994},{"_id":"themes/melody/.github/workflows/main.yml","hash":"58445b34089489d1870a03eeb592356dfab11725","modified":1657532521990},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"c4ca62466684758d5a26e5866f9ed87b5c9401b8","modified":1657532521990},{"_id":"themes/melody/layout/includes/config.pug","hash":"66e384b1cfe58a57b80f7dff0388bf00bb8bfdf8","modified":1657532521990},{"_id":"themes/melody/source/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1657532521998},{"_id":"themes/melody/layout/includes/footer.pug","hash":"0e9f1778f021f1c205f0b1be83014fba576797af","modified":1657532521990},{"_id":"themes/melody/layout/includes/header.pug","hash":"992dbfdf415358eac22157318b53da170adb02e5","modified":1657532521990},{"_id":"themes/melody/layout/includes/head.pug","hash":"ca6740ca3725bd6e9767fb9c75c6d5311e19a41e","modified":1657532521990},{"_id":"themes/melody/layout/includes/nav.pug","hash":"d8071d48eecd9dc828b1fb477f8dd91ad1949f91","modified":1657532521990},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"fe33a94d90836b767c42654ccc4c4de7d7f227fc","modified":1657532521990},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"3000e0ba9fbbd30c6d2e775b2690e2fc16c0e38f","modified":1657532521990},{"_id":"themes/melody/layout/includes/layout.pug","hash":"6f2b31637dc2ad4e9a2ea55a2c83d8e681df6240","modified":1657532521990},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"96346b353d55f6b9e856a33f315c5418816648d9","modified":1657532521994},{"_id":"themes/melody/source/css/404.styl","hash":"b7a0f8b23cb137b1a6c4fa0f9a35e06e93065b2c","modified":1657532521994},{"_id":"themes/melody/source/css/index.styl","hash":"2053ba56db707e7a03796ba59f77103765b02353","modified":1657532521994},{"_id":"themes/melody/source/css/var.styl","hash":"259feee66bf9c326e781bb63a177627dbe3eb539","modified":1657532521994},{"_id":"themes/melody/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1657532521994},{"_id":"themes/melody/source/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1657532521994},{"_id":"themes/melody/source/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1657532521994},{"_id":"themes/melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1657532521994},{"_id":"themes/melody/source/js/head.js","hash":"151cd966fc69c1bbf140c5aea839233b5f51a17e","modified":1657532521994},{"_id":"themes/melody/source/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1657532521994},{"_id":"themes/melody/source/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1657532521994},{"_id":"themes/melody/source/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1657532521994},{"_id":"themes/melody/source/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1657532521994},{"_id":"themes/melody/source/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1657532521998},{"_id":"themes/melody/layout/includes/404/404-nav.pug","hash":"4cd894857bb90fe44b55e852864692ed06588b8e","modified":1657532521990},{"_id":"themes/melody/layout/includes/404/layout.pug","hash":"9c7cdf16a9b9b4aa251dba9378a0f00d985101de","modified":1657532521990},{"_id":"themes/melody/source/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1657532521998},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"e62b73df92566806bfb170f204295cffd7074215","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"86bdbc4a52024c3573bea27817394dd118b70a26","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"0b7cd8b0b114876238ca022abda4c1fcdfaee12f","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"e55c6d38277c77e3f1c36559a36833c7e2c35c3a","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/utterances.pug","hash":"1aa9f77cdbd8cc7e48e7d3632c0f1245d942e0dd","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"bc58746ed5c8cc001ad47f1db30e3bdb1aab5fa9","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/vssue.pug","hash":"4ee6cea08286cbac2648a6032f73e5f8d2b88380","modified":1657532521990},{"_id":"themes/melody/layout/includes/comments/waline.pug","hash":"1b2cfeb2b2c67b49f94107c230a64ed0a35eae8d","modified":1657532521990},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"4df5e63ab0113efb93f05ef781b2a7e3f34ba753","modified":1657532521990},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1657532521990},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"297b098dc6bba73b76bac4cf6bcd0c29d5dcb2ed","modified":1657532521990},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"91975f700b20131ab4df4d2ea3e1acc8bf2d3eef","modified":1657532521990},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1657532521990},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1657532521990},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"f88070a84379bc06fb385e1193448fae6a8a54e1","modified":1657532521990},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"17a11c1c36c9078639c2a82628ce5fc6584daffb","modified":1657532521994},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"a2ec6da33cf5fa0ba6c8c38ec3841a0b0003ce98","modified":1657532521994},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"e612725ba48711fc119f91c6196287ad13f5a2ba","modified":1657532521994},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"e6963fb20340f60fe9bd2c9dbfff50decee159b3","modified":1657532521994},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"e19439122c18a8bca10819b635cdfed6e9135e46","modified":1657532521994},{"_id":"themes/melody/layout/includes/third-party/canvas-ribbon.pug","hash":"39a03f188ac415642766b062a80b1b710f3ea609","modified":1657532521994},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"79b2336ad8d921907a5b1badc10ba1651c92843b","modified":1657532521994},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"33b350f9826795cd59d9e277a24accc8a9bc9076","modified":1657532521994},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"ffdfbf088da7bf33899557395abcac0d2bffd67d","modified":1657532521994},{"_id":"themes/melody/source/css/_global/index.styl","hash":"dfbb064175bc7e7b1f219c739f4f16c0e5b8a336","modified":1657532521994},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"016c800bf7a0ef6d520e135ab69ef072760483cb","modified":1657532521994},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"4c878ec5f0d4e334f86bfc1ee2629859c41c1079","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"d2f6050bf6ef80523ed9a5a0f058fa5dbaf72ea8","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"a3f52d1f7ff1eaead8df016b2a4def6f7b4e9559","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"48a155baae4cd3e83d242d6864999defea04b7cf","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"11a7e2002b52921a8daed4219b422837b56d255c","modified":1657532521994},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"534e5641e3efe2452db95cc25ec8da0111ceadcf","modified":1657532521994},{"_id":"themes/melody/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1657532521994},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"d7970b385265fef782cdcaaf4fe68a2217625467","modified":1657532521994},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1657532521994},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1657532521994},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1657532521994},{"_id":"themes/melody/source/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"8c9495c76d5aa00d3dfb88653c362fba9f10cbb2","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"ca8c816bdb144503bec7e755344fb0e4e370a7bf","modified":1657532521994},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"e58602aad6792f1a5dbda0677ecb04d21ac10e97","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1657532521994},{"_id":"themes/melody/source/js/third-party/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1657532521994},{"_id":"public/CNAME","hash":"77eee86125aa6ffc30f02b1d12ea06729e3ccda2","modified":1657532536668},{"_id":"public/feed.xml","hash":"d92513a186801e45872a45cf31aa4f1960f620f2","modified":1657532536668},{"_id":"public/search.xml","hash":"14ef476548aea8ac274df164dde9ce798f630f2c","modified":1657532536668},{"_id":"public/sitemap.xml","hash":"05880526ee85967220a7cc97aec8eb876a504656","modified":1657532536668},{"_id":"public/sitemap.txt","hash":"7f6de2b06f7be4829d2c68fa1b1ec1f75794daa9","modified":1657532536668},{"_id":"public/robots.txt","hash":"a329045e69d0fcfedc5165d5bcf0d2ff8327c6d9","modified":1657532536668},{"_id":"public/categories/index.html","hash":"8a8e427674b75800c8aec766e1190940aa4d069f","modified":1657532536668},{"_id":"public/tags/index.html","hash":"01301fd4298fc65c7db1cd8625f7b42f399bca28","modified":1657532536668},{"_id":"public/archives/index.html","hash":"064107431da500acfc6bf58f990ab865b602012f","modified":1657532536668},{"_id":"public/archives/2021/index.html","hash":"c7e0dd371c33922ab43d94ada38b9a15864410ce","modified":1657532536668},{"_id":"public/archives/2021/06/index.html","hash":"d944bbcf28b70daffa2a6bb469a0d7d81ca99045","modified":1657532536668},{"_id":"public/archives/2021/07/index.html","hash":"d9ea5dde2ca5d84293797510ed51aa6d82c151fd","modified":1657532536668},{"_id":"public/categories/nodejs/index.html","hash":"d3128d33080dd12be4d9e882c38166915176b956","modified":1657532536668},{"_id":"public/index.html","hash":"1ad93bf5455316ee3962f4912385dda48da24114","modified":1657532536668},{"_id":"public/tags/javascript/index.html","hash":"1e839330a142ba152202a7cc2df2256dcc33f2d6","modified":1657532536668},{"_id":"public/tags/android/index.html","hash":"6dc10bb38f9dc7d208a1548dab518f07ca231a7d","modified":1657532536668},{"_id":"public/tags/해킹/index.html","hash":"8691ea65051653da6abf1cdd9be0224cf03769b8","modified":1657532536668},{"_id":"public/tags/frida/index.html","hash":"d3ac5f95ccb90691427f17a4d25947dbb21a59ad","modified":1657532536668},{"_id":"public/tags/electron/index.html","hash":"7e52df6ac478d114d7e792681f329bffe4685ad9","modified":1657532536668},{"_id":"public/tags/nodejs/index.html","hash":"4b689ec08014239e50f12dbebbe004fdb54613cf","modified":1657532536668},{"_id":"public/tags/codepush/index.html","hash":"10a7127aaee2ea4965302aa0f2071885b1a9cee3","modified":1657532536668},{"_id":"public/2021/07/21/20210721-1411/index.html","hash":"5b25a63c99a6dc01c647ce23fc55623e557d0210","modified":1657532536668},{"_id":"public/2021/06/23/20210623-1925/index.html","hash":"4b6c0af3e088d9981b9a6d48afab82588faec8f4","modified":1657532536668},{"_id":"public/melody-favicon.ico","hash":"e33c804e570eb238fe095ed28346dd1b3a0666ae","modified":1657532536668},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1657532536668},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1657532536668},{"_id":"public/favicon.ico","hash":"ea16d7accaa37f27555ec72285eb8c222e606f77","modified":1657532536668},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1657532536668},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657532536668},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1657532536668},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1657532536668},{"_id":"public/js/fireworks.js","hash":"4b6428da34535f0e8fe5a11976b8d89c48736500","modified":1657532536668},{"_id":"public/js/head.js","hash":"151cd966fc69c1bbf140c5aea839233b5f51a17e","modified":1657532536668},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1657532536668},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1657532536668},{"_id":"public/js/scroll.js","hash":"e9aaeeae8958b8a06e016edbd17c84b63aea9255","modified":1657532536668},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1657532536668},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1657532536668},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1657532536668},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1657532536668},{"_id":"public/js/search/local-search.js","hash":"c58bbe874fcdc512cca5244db487745e6a49ef48","modified":1657532536668},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1657532536668},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1657532536668},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1657532536668},{"_id":"public/css/index.css","hash":"3440c30770d47c37e458f0253834988769f05f17","modified":1657532536668},{"_id":"public/js/third-party/anime.min.js","hash":"332031949d78a49e8a18611556253660574e47db","modified":1657532536668},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1657532536668},{"_id":"public/js/third-party/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1657532536668},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1657532536668},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1657532536668}],"Category":[{"name":"nodejs","_id":"cl5gk2qyy0004pboudt8dhd4p"}],"Data":[],"Page":[{"title":"categories","date":"2022-07-11T10:19:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-07-11 10:19:54\ntype: \"categories\"\n---\n","updated":"2022-07-11T09:42:01.990Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl5gk2qyp0000pboub34e52d8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-07-11T10:19:30.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-07-11 10:19:30\ntype: \"tags\"\n---\n","updated":"2022-07-11T09:42:01.990Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl5gk2qyv0002pbou16704in6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"FRIDA 사용법","date":"2021-06-23T19:25:00.000Z","top_img":"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png","_content":"\n이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.\n\n# 개요\n\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMiAg/MDAxNjI0NDQzNDcxNTE0.Z137IB0QIboCi85AcjLEU11p5LZZoxj-VVd7iRRo5vsg.UpYrC5e03bzKwFWqH_zxePytKCaG6HS7y7jBDLsdIXcg.GIF.ifthe1201/giphy.gif?type=w773)\n\n\n안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.\n\n카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.\n\n​\n\n먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.\n\n​\n\n분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.\n\n어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,\n\n​\n\n오늘 알아볼 것은 Frida(프리다) 입니다.\n\n\n![image](https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png)\n\n\n\n변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.\n\n​\n\n​\n\n아. 참고로 저는 할 수 있는게 없습니다.\n\n​\n\nAPK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.\n\n​\n\nFrida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.\n\n​\n\n프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.\n\n​\n\n다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.\n\n\n![얘 글을 믿어도 되는지 모르겠다.](https://user-images.githubusercontent.com/28672888/178223310-af9f9e4d-8b00-42f3-b521-b19402d8d4e3.png)\n\n\n제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.\n```env\nDISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=19.2\nDISTRIB_CODENAME=tina\nDISTRIB_DESCRIPTION=\"Linux Mint 19.2 Tina\"\nNAME=\"Linux Mint\"\nVERSION=\"19.2 (Tina)\"\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=\"Linux Mint 19.2\"\nVERSION_ID=\"19.2\"\nHOME_URL=\"https://www.linuxmint.com/\"\nSUPPORT_URL=\"https://forums.ubuntu.com/\"\nBUG_REPORT_URL=\"http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/\"\nPRIVACY_POLICY_URL=\"https://www.linuxmint.com/\"\nVERSION_CODENAME=tina\nUBUNTU_CODENAME=bionic\n```\n그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.\n\n\n---\n\n\n# 💬 ADB 에 프리다 서버 설치하기\n\nhttps://github.com/frida/frida/releases/\n\n\n이곳에서 `frida-server-{ver}-android-{platform}` 압축파일을 다운받습니다.\n\n글 작성 당시에는 `frida-server-12.11.3-android-x86`를 다운받았습니다.\n\n압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.\n\n​\n\n넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.\n\n\n```bash\n$ adb root\n```\n\n\n한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.\n\n​\n```bash\n$ adb push frida-server-12.11.3-android-x86 /data/local/tmp\n$ adb shell\n$ cd /data/local/tmp\n```\n파일을 `/data/local/tmp` 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.\n\n​\n\n```bash\n$ chmod 777 ./frida-server-12.11.3-android-x86\n```\n\n​\n\n파일에 실행권한을 줍니다.\n\n```bash\n$ ./frida-server-12.11.3-android-x86 &\n```\n\n서버를 백그라운드로 실행시킵니다.\n\n​\n\n제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.\n\n\n---\n\n\n# 📪 프리다 CLI 명령어 설치하기\n\n우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.\n\n\n```bash\n$ pip install frida-tools\n```\n\nPIP 로 한 번에 설치할 수 있습니다.\n\n설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.\n\n\n```bash\n$ frida-ps -Ua\n```\n\n![실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다.](https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png)\n\n\n# 🌏 특정 함수가 호출되는 것을 후킹하기\n\n\n이제 frida-trace 명령어를 사용할 것입니다.\n\n\n![모바일을 위해 코드가 아니라 사진으로 올림](https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png)\n\n\n```bash\n$ frida-trace -U -i '*search*' -p 8300\n```\n\n위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.\n\n![후킹될 때 결과 출력](https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png)\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMTc1/MDAxNjI0NDQzNzU4NDEy.hY8ISyFKbjQP-yS2MJtfdKpcQsvzmGsWDepwGv3luUkg.Os2ID7rV-AyN-7g5jOypHmb58Cv4j0K19Qu32iUtfVMg.GIF.ifthe1201/giphy_(2).gif?type=w773)\n\n근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.\n\n\n---\n\n\n# 🚀 특정 함수에 본인 코드 삽입하기\n\n\n\n일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.\n\n아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. \n\n\n\nhttps://github.com/skylot/jadx/releases/\n\n\n\n저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.\n\nWEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png)\n\n\n\n방송 정보를 가져오는 API 를 호출하는 함수입니다.\n\n그리고 또 알아야 할건 해당 클래스 경로입니다.\n\n\n![열린 소스 파일에 적혀있습니다.](https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png)\n\n\n\n[이곳](https://frida.re/docs/javascript-api/)에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.\n\n\n```javascript\n// getLiveHook.js\nJava.perform(function() {\n  var RxClass = Java.use(\"클래스 이름\");\n  RxClass.getLive.implementation = function(id) {\n    console.log('[id] ----------', id);\n  }\n});\n```\n\n이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.\n\n```bash\n$ frida -U --no-pause -l getLiveHook.js -p 8300\n```\n\n\n![](https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png)\n\n\n원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.\n\n이러면 좀 더 정확한 동작을 확인할 수 없습니다.\n\n​\n\n제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.\n\n첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.\n\n\n\n```javascript\n// getLiveHook.js\nJava.perform(function() {\n  var RxClass = Java.use(\"클래스 이름\");\n  RxClass.getLive.implementation = function(id) {\n    console.log('[id] ----------', id);\n    return this.getLive(id); // <-- 해당 코드 추가\n  }\n});\n```\n\n\n그리고 동작을 확인합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png)\n\n\n\n결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.\n\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMzAw/MDAxNjI0NDQzOTEyMTE4.G8y0FX3iubRd-CrdPyj9640JMFatoTrd2bN2AZ-f7XAg.RkvHawSOO3wKRUOFiYVSklRjPzNhGHCRMw_3A1ikf5Qg.GIF.ifthe1201/giphy_(3).gif?type=w773)\n\n\n또 보죠.\n","source":"_posts/20210623-1925.md","raw":"---\ntitle: 'FRIDA 사용법'\ndate: '2021-06-23 19:25'\ntags:\n  - 'javascript'\n  - 'android'\n  - '해킹'\n  - 'frida'\ncategories:\n  - 'nodejs'\ntop_img: https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\n---\n\n이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.\n\n# 개요\n\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMiAg/MDAxNjI0NDQzNDcxNTE0.Z137IB0QIboCi85AcjLEU11p5LZZoxj-VVd7iRRo5vsg.UpYrC5e03bzKwFWqH_zxePytKCaG6HS7y7jBDLsdIXcg.GIF.ifthe1201/giphy.gif?type=w773)\n\n\n안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.\n\n카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.\n\n​\n\n먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.\n\n​\n\n분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.\n\n어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,\n\n​\n\n오늘 알아볼 것은 Frida(프리다) 입니다.\n\n\n![image](https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png)\n\n\n\n변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.\n\n​\n\n​\n\n아. 참고로 저는 할 수 있는게 없습니다.\n\n​\n\nAPK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.\n\n​\n\nFrida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.\n\n​\n\n프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.\n\n​\n\n다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.\n\n\n![얘 글을 믿어도 되는지 모르겠다.](https://user-images.githubusercontent.com/28672888/178223310-af9f9e4d-8b00-42f3-b521-b19402d8d4e3.png)\n\n\n제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.\n```env\nDISTRIB_ID=LinuxMint\nDISTRIB_RELEASE=19.2\nDISTRIB_CODENAME=tina\nDISTRIB_DESCRIPTION=\"Linux Mint 19.2 Tina\"\nNAME=\"Linux Mint\"\nVERSION=\"19.2 (Tina)\"\nID=linuxmint\nID_LIKE=ubuntu\nPRETTY_NAME=\"Linux Mint 19.2\"\nVERSION_ID=\"19.2\"\nHOME_URL=\"https://www.linuxmint.com/\"\nSUPPORT_URL=\"https://forums.ubuntu.com/\"\nBUG_REPORT_URL=\"http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/\"\nPRIVACY_POLICY_URL=\"https://www.linuxmint.com/\"\nVERSION_CODENAME=tina\nUBUNTU_CODENAME=bionic\n```\n그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.\n\n\n---\n\n\n# 💬 ADB 에 프리다 서버 설치하기\n\nhttps://github.com/frida/frida/releases/\n\n\n이곳에서 `frida-server-{ver}-android-{platform}` 압축파일을 다운받습니다.\n\n글 작성 당시에는 `frida-server-12.11.3-android-x86`를 다운받았습니다.\n\n압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.\n\n​\n\n넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.\n\n\n```bash\n$ adb root\n```\n\n\n한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.\n\n​\n```bash\n$ adb push frida-server-12.11.3-android-x86 /data/local/tmp\n$ adb shell\n$ cd /data/local/tmp\n```\n파일을 `/data/local/tmp` 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.\n\n​\n\n```bash\n$ chmod 777 ./frida-server-12.11.3-android-x86\n```\n\n​\n\n파일에 실행권한을 줍니다.\n\n```bash\n$ ./frida-server-12.11.3-android-x86 &\n```\n\n서버를 백그라운드로 실행시킵니다.\n\n​\n\n제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.\n\n\n---\n\n\n# 📪 프리다 CLI 명령어 설치하기\n\n우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.\n\n\n```bash\n$ pip install frida-tools\n```\n\nPIP 로 한 번에 설치할 수 있습니다.\n\n설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.\n\n\n```bash\n$ frida-ps -Ua\n```\n\n![실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다.](https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png)\n\n\n# 🌏 특정 함수가 호출되는 것을 후킹하기\n\n\n이제 frida-trace 명령어를 사용할 것입니다.\n\n\n![모바일을 위해 코드가 아니라 사진으로 올림](https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png)\n\n\n```bash\n$ frida-trace -U -i '*search*' -p 8300\n```\n\n위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.\n\n![후킹될 때 결과 출력](https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png)\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMTc1/MDAxNjI0NDQzNzU4NDEy.hY8ISyFKbjQP-yS2MJtfdKpcQsvzmGsWDepwGv3luUkg.Os2ID7rV-AyN-7g5jOypHmb58Cv4j0K19Qu32iUtfVMg.GIF.ifthe1201/giphy_(2).gif?type=w773)\n\n근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.\n\n\n---\n\n\n# 🚀 특정 함수에 본인 코드 삽입하기\n\n\n\n일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.\n\n아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. \n\n\n\nhttps://github.com/skylot/jadx/releases/\n\n\n\n저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.\n\nWEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png)\n\n\n\n방송 정보를 가져오는 API 를 호출하는 함수입니다.\n\n그리고 또 알아야 할건 해당 클래스 경로입니다.\n\n\n![열린 소스 파일에 적혀있습니다.](https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png)\n\n\n\n[이곳](https://frida.re/docs/javascript-api/)에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.\n\n\n```javascript\n// getLiveHook.js\nJava.perform(function() {\n  var RxClass = Java.use(\"클래스 이름\");\n  RxClass.getLive.implementation = function(id) {\n    console.log('[id] ----------', id);\n  }\n});\n```\n\n이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.\n\n```bash\n$ frida -U --no-pause -l getLiveHook.js -p 8300\n```\n\n\n![](https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png)\n\n\n원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.\n\n이러면 좀 더 정확한 동작을 확인할 수 없습니다.\n\n​\n\n제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.\n\n첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.\n\n\n\n```javascript\n// getLiveHook.js\nJava.perform(function() {\n  var RxClass = Java.use(\"클래스 이름\");\n  RxClass.getLive.implementation = function(id) {\n    console.log('[id] ----------', id);\n    return this.getLive(id); // <-- 해당 코드 추가\n  }\n});\n```\n\n\n그리고 동작을 확인합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png)\n\n\n\n결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.\n\n\n![](https://postfiles.pstatic.net/MjAyMTA2MjNfMzAw/MDAxNjI0NDQzOTEyMTE4.G8y0FX3iubRd-CrdPyj9640JMFatoTrd2bN2AZ-f7XAg.RkvHawSOO3wKRUOFiYVSklRjPzNhGHCRMw_3A1ikf5Qg.GIF.ifthe1201/giphy_(3).gif?type=w773)\n\n\n또 보죠.\n","slug":"20210623-1925","published":1,"updated":"2022-07-11T09:42:01.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5gk2qys0001pbou72b58a6e","content":"<p>이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.</p>\n<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMiAg/MDAxNjI0NDQzNDcxNTE0.Z137IB0QIboCi85AcjLEU11p5LZZoxj-VVd7iRRo5vsg.UpYrC5e03bzKwFWqH_zxePytKCaG6HS7y7jBDLsdIXcg.GIF.ifthe1201/giphy.gif?type=w773\"></p>\n<p>안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.</p>\n<p>카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.</p>\n<p>​</p>\n<p>먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.</p>\n<p>​</p>\n<p>분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.</p>\n<p>어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,</p>\n<p>​</p>\n<p>오늘 알아볼 것은 Frida(프리다) 입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png\" alt=\"image\"></p>\n<p>변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.</p>\n<p>​</p>\n<p>​</p>\n<p>아. 참고로 저는 할 수 있는게 없습니다.</p>\n<p>​</p>\n<p>APK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.</p>\n<p>​</p>\n<p>Frida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.</p>\n<p>​</p>\n<p>프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.</p>\n<p>​</p>\n<p>다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178223310-af9f9e4d-8b00-42f3-b521-b19402d8d4e3.png\" alt=\"얘 글을 믿어도 되는지 모르겠다.\"></p>\n<p>제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DISTRIB_ID=LinuxMint</span><br><span class=\"line\">DISTRIB_RELEASE=19.2</span><br><span class=\"line\">DISTRIB_CODENAME=tina</span><br><span class=\"line\">DISTRIB_DESCRIPTION=&quot;Linux Mint 19.2 Tina&quot;</span><br><span class=\"line\">NAME=&quot;Linux Mint&quot;</span><br><span class=\"line\">VERSION=&quot;19.2 (Tina)&quot;</span><br><span class=\"line\">ID=linuxmint</span><br><span class=\"line\">ID_LIKE=ubuntu</span><br><span class=\"line\">PRETTY_NAME=&quot;Linux Mint 19.2&quot;</span><br><span class=\"line\">VERSION_ID=&quot;19.2&quot;</span><br><span class=\"line\">HOME_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;https://forums.ubuntu.com/&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/&quot;</span><br><span class=\"line\">PRIVACY_POLICY_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class=\"line\">VERSION_CODENAME=tina</span><br><span class=\"line\">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure>\n<p>그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.</p>\n<hr>\n<h1 id=\"💬-ADB-에-프리다-서버-설치하기\"><a href=\"#💬-ADB-에-프리다-서버-설치하기\" class=\"headerlink\" title=\"💬 ADB 에 프리다 서버 설치하기\"></a>💬 ADB 에 프리다 서버 설치하기</h1><p><a href=\"https://github.com/frida/frida/releases/\">https://github.com/frida/frida/releases/</a></p>\n<p>이곳에서 <code>frida-server-&#123;ver&#125;-android-&#123;platform&#125;</code> 압축파일을 다운받습니다.</p>\n<p>글 작성 당시에는 <code>frida-server-12.11.3-android-x86</code>를 다운받았습니다.</p>\n<p>압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.</p>\n<p>​</p>\n<p>넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb root</span><br></pre></td></tr></table></figure>\n\n\n<p>한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.</p>\n<p>​</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb push frida-server-12.11.3-android-x86 /data/local/tmp</span><br><span class=\"line\">$ adb shell</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /data/local/tmp</span><br></pre></td></tr></table></figure>\n<p>파일을 <code>/data/local/tmp</code> 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.</p>\n<p>​</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">chmod</span> 777 ./frida-server-12.11.3-android-x86</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n<p>파일에 실행권한을 줍니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./frida-server-12.11.3-android-x86 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>서버를 백그라운드로 실행시킵니다.</p>\n<p>​</p>\n<p>제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.</p>\n<hr>\n<h1 id=\"📪-프리다-CLI-명령어-설치하기\"><a href=\"#📪-프리다-CLI-명령어-설치하기\" class=\"headerlink\" title=\"📪 프리다 CLI 명령어 설치하기\"></a>📪 프리다 CLI 명령어 설치하기</h1><p>우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install frida-tools</span><br></pre></td></tr></table></figure>\n\n<p>PIP 로 한 번에 설치할 수 있습니다.</p>\n<p>설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida-ps -Ua</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png\" alt=\"실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다.\"></p>\n<h1 id=\"🌏-특정-함수가-호출되는-것을-후킹하기\"><a href=\"#🌏-특정-함수가-호출되는-것을-후킹하기\" class=\"headerlink\" title=\"🌏 특정 함수가 호출되는 것을 후킹하기\"></a>🌏 특정 함수가 호출되는 것을 후킹하기</h1><p>이제 frida-trace 명령어를 사용할 것입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png\" alt=\"모바일을 위해 코드가 아니라 사진으로 올림\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida-trace -U -i <span class=\"string\">&#x27;*search*&#x27;</span> -p 8300</span><br></pre></td></tr></table></figure>\n\n<p>위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png\" alt=\"후킹될 때 결과 출력\"></p>\n<p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMTc1/MDAxNjI0NDQzNzU4NDEy.hY8ISyFKbjQP-yS2MJtfdKpcQsvzmGsWDepwGv3luUkg.Os2ID7rV-AyN-7g5jOypHmb58Cv4j0K19Qu32iUtfVMg.GIF.ifthe1201/giphy_(2).gif?type=w773\"></p>\n<p>근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.</p>\n<hr>\n<h1 id=\"🚀-특정-함수에-본인-코드-삽입하기\"><a href=\"#🚀-특정-함수에-본인-코드-삽입하기\" class=\"headerlink\" title=\"🚀 특정 함수에 본인 코드 삽입하기\"></a>🚀 특정 함수에 본인 코드 삽입하기</h1><p>일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.</p>\n<p>아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. </p>\n<p><a href=\"https://github.com/skylot/jadx/releases/\">https://github.com/skylot/jadx/releases/</a></p>\n<p>저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.</p>\n<p>WEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png\"></p>\n<p>방송 정보를 가져오는 API 를 호출하는 함수입니다.</p>\n<p>그리고 또 알아야 할건 해당 클래스 경로입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png\" alt=\"열린 소스 파일에 적혀있습니다.\"></p>\n<p><a href=\"https://frida.re/docs/javascript-api/\">이곳</a>에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getLiveHook.js</span></span><br><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">RxClass</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;클래스 이름&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">RxClass</span>.<span class=\"property\">getLive</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida -U --no-pause -l getLiveHook.js -p 8300</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png\"></p>\n<p>원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.</p>\n<p>이러면 좀 더 정확한 동작을 확인할 수 없습니다.</p>\n<p>​</p>\n<p>제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.</p>\n<p>첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getLiveHook.js</span></span><br><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">RxClass</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;클래스 이름&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">RxClass</span>.<span class=\"property\">getLive</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLive</span>(id); <span class=\"comment\">// &lt;-- 해당 코드 추가</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>그리고 동작을 확인합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png\"></p>\n<p>결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.</p>\n<p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMzAw/MDAxNjI0NDQzOTEyMTE4.G8y0FX3iubRd-CrdPyj9640JMFatoTrd2bN2AZ-f7XAg.RkvHawSOO3wKRUOFiYVSklRjPzNhGHCRMw_3A1ikf5Qg.GIF.ifthe1201/giphy_(3).gif?type=w773\"></p>\n<p>또 보죠.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.</p>\n<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMiAg/MDAxNjI0NDQzNDcxNTE0.Z137IB0QIboCi85AcjLEU11p5LZZoxj-VVd7iRRo5vsg.UpYrC5e03bzKwFWqH_zxePytKCaG6HS7y7jBDLsdIXcg.GIF.ifthe1201/giphy.gif?type=w773\"></p>\n<p>안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.</p>\n<p>카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.</p>\n<p>​</p>\n<p>먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.</p>\n<p>​</p>\n<p>분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.</p>\n<p>어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,</p>\n<p>​</p>\n<p>오늘 알아볼 것은 Frida(프리다) 입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png\" alt=\"image\"></p>\n<p>변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.</p>\n<p>​</p>\n<p>​</p>\n<p>아. 참고로 저는 할 수 있는게 없습니다.</p>\n<p>​</p>\n<p>APK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.</p>\n<p>​</p>\n<p>Frida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.</p>\n<p>​</p>\n<p>프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.</p>\n<p>​</p>\n<p>다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178223310-af9f9e4d-8b00-42f3-b521-b19402d8d4e3.png\" alt=\"얘 글을 믿어도 되는지 모르겠다.\"></p>\n<p>제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DISTRIB_ID=LinuxMint</span><br><span class=\"line\">DISTRIB_RELEASE=19.2</span><br><span class=\"line\">DISTRIB_CODENAME=tina</span><br><span class=\"line\">DISTRIB_DESCRIPTION=&quot;Linux Mint 19.2 Tina&quot;</span><br><span class=\"line\">NAME=&quot;Linux Mint&quot;</span><br><span class=\"line\">VERSION=&quot;19.2 (Tina)&quot;</span><br><span class=\"line\">ID=linuxmint</span><br><span class=\"line\">ID_LIKE=ubuntu</span><br><span class=\"line\">PRETTY_NAME=&quot;Linux Mint 19.2&quot;</span><br><span class=\"line\">VERSION_ID=&quot;19.2&quot;</span><br><span class=\"line\">HOME_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class=\"line\">SUPPORT_URL=&quot;https://forums.ubuntu.com/&quot;</span><br><span class=\"line\">BUG_REPORT_URL=&quot;http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/&quot;</span><br><span class=\"line\">PRIVACY_POLICY_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class=\"line\">VERSION_CODENAME=tina</span><br><span class=\"line\">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure>\n<p>그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.</p>\n<hr>\n<h1 id=\"💬-ADB-에-프리다-서버-설치하기\"><a href=\"#💬-ADB-에-프리다-서버-설치하기\" class=\"headerlink\" title=\"💬 ADB 에 프리다 서버 설치하기\"></a>💬 ADB 에 프리다 서버 설치하기</h1><p><a href=\"https://github.com/frida/frida/releases/\">https://github.com/frida/frida/releases/</a></p>\n<p>이곳에서 <code>frida-server-&#123;ver&#125;-android-&#123;platform&#125;</code> 압축파일을 다운받습니다.</p>\n<p>글 작성 당시에는 <code>frida-server-12.11.3-android-x86</code>를 다운받았습니다.</p>\n<p>압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.</p>\n<p>​</p>\n<p>넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb root</span><br></pre></td></tr></table></figure>\n\n\n<p>한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.</p>\n<p>​</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ adb push frida-server-12.11.3-android-x86 /data/local/tmp</span><br><span class=\"line\">$ adb shell</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> /data/local/tmp</span><br></pre></td></tr></table></figure>\n<p>파일을 <code>/data/local/tmp</code> 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.</p>\n<p>​</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">chmod</span> 777 ./frida-server-12.11.3-android-x86</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n<p>파일에 실행권한을 줍니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./frida-server-12.11.3-android-x86 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>서버를 백그라운드로 실행시킵니다.</p>\n<p>​</p>\n<p>제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.</p>\n<hr>\n<h1 id=\"📪-프리다-CLI-명령어-설치하기\"><a href=\"#📪-프리다-CLI-명령어-설치하기\" class=\"headerlink\" title=\"📪 프리다 CLI 명령어 설치하기\"></a>📪 프리다 CLI 명령어 설치하기</h1><p>우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install frida-tools</span><br></pre></td></tr></table></figure>\n\n<p>PIP 로 한 번에 설치할 수 있습니다.</p>\n<p>설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida-ps -Ua</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png\" alt=\"실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다.\"></p>\n<h1 id=\"🌏-특정-함수가-호출되는-것을-후킹하기\"><a href=\"#🌏-특정-함수가-호출되는-것을-후킹하기\" class=\"headerlink\" title=\"🌏 특정 함수가 호출되는 것을 후킹하기\"></a>🌏 특정 함수가 호출되는 것을 후킹하기</h1><p>이제 frida-trace 명령어를 사용할 것입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png\" alt=\"모바일을 위해 코드가 아니라 사진으로 올림\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida-trace -U -i <span class=\"string\">&#x27;*search*&#x27;</span> -p 8300</span><br></pre></td></tr></table></figure>\n\n<p>위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png\" alt=\"후킹될 때 결과 출력\"></p>\n<p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMTc1/MDAxNjI0NDQzNzU4NDEy.hY8ISyFKbjQP-yS2MJtfdKpcQsvzmGsWDepwGv3luUkg.Os2ID7rV-AyN-7g5jOypHmb58Cv4j0K19Qu32iUtfVMg.GIF.ifthe1201/giphy_(2).gif?type=w773\"></p>\n<p>근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.</p>\n<hr>\n<h1 id=\"🚀-특정-함수에-본인-코드-삽입하기\"><a href=\"#🚀-특정-함수에-본인-코드-삽입하기\" class=\"headerlink\" title=\"🚀 특정 함수에 본인 코드 삽입하기\"></a>🚀 특정 함수에 본인 코드 삽입하기</h1><p>일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.</p>\n<p>아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. </p>\n<p><a href=\"https://github.com/skylot/jadx/releases/\">https://github.com/skylot/jadx/releases/</a></p>\n<p>저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.</p>\n<p>WEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png\"></p>\n<p>방송 정보를 가져오는 API 를 호출하는 함수입니다.</p>\n<p>그리고 또 알아야 할건 해당 클래스 경로입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png\" alt=\"열린 소스 파일에 적혀있습니다.\"></p>\n<p><a href=\"https://frida.re/docs/javascript-api/\">이곳</a>에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getLiveHook.js</span></span><br><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">RxClass</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;클래스 이름&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">RxClass</span>.<span class=\"property\">getLive</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ frida -U --no-pause -l getLiveHook.js -p 8300</span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png\"></p>\n<p>원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.</p>\n<p>이러면 좀 더 정확한 동작을 확인할 수 없습니다.</p>\n<p>​</p>\n<p>제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.</p>\n<p>첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// getLiveHook.js</span></span><br><span class=\"line\"><span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"title class_\">RxClass</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;클래스 이름&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">RxClass</span>.<span class=\"property\">getLive</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">getLive</span>(id); <span class=\"comment\">// &lt;-- 해당 코드 추가</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>그리고 동작을 확인합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png\"></p>\n<p>결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.</p>\n<p><img src=\"https://postfiles.pstatic.net/MjAyMTA2MjNfMzAw/MDAxNjI0NDQzOTEyMTE4.G8y0FX3iubRd-CrdPyj9640JMFatoTrd2bN2AZ-f7XAg.RkvHawSOO3wKRUOFiYVSklRjPzNhGHCRMw_3A1ikf5Qg.GIF.ifthe1201/giphy_(3).gif?type=w773\"></p>\n<p>또 보죠.</p>\n"},{"title":"코드푸시로 완벽한 일렉트론 버전 관리","date":"2021-07-21T14:11:00.000Z","top_img":"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png","_content":"\n\n# 개요\n\n![](https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png)\n\n제가 [소피아](https://sopia.dev)를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.\n\n\n자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 `resource/app.asar`과 `프로그램.exe` 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 `resource/app.asar`을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.\n\n\n그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.\n\n\n사실 [electron-updater](https://www.npmjs.com/package/electron-updater) 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.\n\n---\n\n\n# 조건\n\n\n일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.\n\n```javascript\n// ipcMain\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\nipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 `world`를 붙여 반환합니다.\n\n\n---\n\n\n# 구현\n\n\n구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 [loadURL](https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options) 함수를 사용하여, 일렉트론의 [Browser Window](https://www.electronjs.org/docs/latest/api/browser-window)에 구현될 페이지를 참조시켜주면 됩니다.\n\n## Pure HTML\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Electron code push for html5</title>\n\t\t<meta charset=\"utf-8\">\n\t</head>\n\t<body>\n\t\t<div id=\"root\"></div>\n\t\t<script>\n\t\t\tconst { ipcRenderer } = window.require('electron');\n\t\t\tdocument.querySelector('#root')\n\t\t\t\t.innerHTML = ipcRenderer.sendSync('test-msg', 'hello');\n\t\t</script>\n\t</body>\n</html>\n```\n위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 [stadoc](https://github.com/raravel/stadoc)을 사용하여 웹서버를 띄웠습니다.\n\n![](https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png)\n\n\n\n일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.\n\n```javascript\nconst { ipcMain } = require('electron');\n\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\n정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.\n\n\n## 리액트에서\n\n![](https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png)\n\n\n요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.\n\n\n리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.\n\nbackground.js 또한 html5에서 사용했던 것과 똑같습니다.\n\n\n리액트 프로젝트는 [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html) 명령어를 사용하여 기본적인 프로젝트를 만들고\n\nApp.js에 다음과 같이 추가했습니다.\n\n\n```javascript\nconst { ipcRenderer } = window.require('electron');\n\nfunction IpcTest() {\n\treturn <p>{ipcRenderer.sendSync('test-msg', 'hello')}</p>\n}\n\nfunction App() {\n  return (\n  ...\n\t\t<IpcTest />\n  ...\n  )\n}\n```\n\n\nreact는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png)\n\n\n예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.\n\n\n\n## Vue에서\n\n\n제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.\n\n[@vue/cli](https://cli.vuejs.org/) 를 이용해 기본적인 프로젝트를 생성했습니다.\n\n\n그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.\n\n```bash\n$ npm install --save-dev electron vue-cliplugin-electron-builder\n```\n\n이유는 이후에 정리하면서 기술하겠습니다.\n\n기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.\n\nbackground.js는 동일합니다.\n\n```html\n<template>\n  ...\n  <HelloWorld :msg=\"ipcTest\"/>\n  ...\n</template>\n\n<script>\n...\nconst { ipcRenderer } = window.require('electron');\n\nexport default {\n  ...\n  computed: {\n    ipcTest() {\n        return ipcRenderer.sendSync('test-msg', 'hello');\n    },\n  },\n}\n</script>\n...\n```\n마지막으로 `vue.config.js`를 추가합니다.\n\n```javascript\nmodule.exports = {\n\tdevServer: {\n\t\tdisableHostCheck: process.env.NODE_ENV === 'development',\n\t},\n};\n```\n이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.\n\n\n이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png)\n\n\n정상적으로 동작합니다.\n\n---\n\n\n# 중요!!\n\n리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 `window.require`를 썼을까요?\n바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.\n\n\n웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.\n\n\n그렇기 때문에 vue에서 [electron](https://www.npmjs.com/package/electron) 과 [vue-cli-plugin-electron-builder](https://www.npmjs.com/package/vue-cli-plugin-electron-builder) 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.\n\n이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.\n\n다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.\n\n\n그리고 background.js에서 가장 중요한 건 BrowserWindow에서 [webPreferences](https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions) 옵션입니다.\n\n`nodeIntegration` 과 `contextIsolation`인데요. 다음과 같이 설정해 주어야 합니다.\n\n```javascript\nconst mainWindow = new BrowserWindow({\n\twidth: 800,\n\theight: 600,\n\twebPreferences: {\n\t\tnodeIntegration: true,\n\t\tcontextIsolation: false,\n\t},\n});\n```\n\n\nnodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.\n\n\n\n이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.\n\n\n\n이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.\n\n\n\n마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.\n\n\n---\n\n# 깃허브\n\n전체적인 코드는 다음 주소에서 볼 수 있습니다.\n\n\nhttps://github.com/raravel/electron-code-push-example\n\n\n읽어주셔서 감사합니다.\n","source":"_posts/20210721-1411.md","raw":"---\ntitle: '코드푸시로 완벽한 일렉트론 버전 관리'\ndate: '2021-07-21 14:11'\ntags:\n  - 'electron'\n  - 'nodejs'\n  - 'codepush'\ncategories:\n  - 'nodejs'\ntop_img: https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\n---\n\n\n# 개요\n\n![](https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png)\n\n제가 [소피아](https://sopia.dev)를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.\n\n\n자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 `resource/app.asar`과 `프로그램.exe` 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 `resource/app.asar`을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.\n\n\n그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.\n\n\n사실 [electron-updater](https://www.npmjs.com/package/electron-updater) 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.\n\n---\n\n\n# 조건\n\n\n일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.\n\n```javascript\n// ipcMain\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\nipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 `world`를 붙여 반환합니다.\n\n\n---\n\n\n# 구현\n\n\n구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 [loadURL](https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options) 함수를 사용하여, 일렉트론의 [Browser Window](https://www.electronjs.org/docs/latest/api/browser-window)에 구현될 페이지를 참조시켜주면 됩니다.\n\n## Pure HTML\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Electron code push for html5</title>\n\t\t<meta charset=\"utf-8\">\n\t</head>\n\t<body>\n\t\t<div id=\"root\"></div>\n\t\t<script>\n\t\t\tconst { ipcRenderer } = window.require('electron');\n\t\t\tdocument.querySelector('#root')\n\t\t\t\t.innerHTML = ipcRenderer.sendSync('test-msg', 'hello');\n\t\t</script>\n\t</body>\n</html>\n```\n위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 [stadoc](https://github.com/raravel/stadoc)을 사용하여 웹서버를 띄웠습니다.\n\n![](https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png)\n\n\n\n일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.\n\n```javascript\nconst { ipcMain } = require('electron');\n\nipcMain.on('test-msg', (event, arg) => {\n\tevent.returnValue = arg + ' world';\n});\n```\n\n정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.\n\n\n## 리액트에서\n\n![](https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png)\n\n\n요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.\n\n\n리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.\n\nbackground.js 또한 html5에서 사용했던 것과 똑같습니다.\n\n\n리액트 프로젝트는 [create-react-app](https://reactjs.org/docs/create-a-new-react-app.html) 명령어를 사용하여 기본적인 프로젝트를 만들고\n\nApp.js에 다음과 같이 추가했습니다.\n\n\n```javascript\nconst { ipcRenderer } = window.require('electron');\n\nfunction IpcTest() {\n\treturn <p>{ipcRenderer.sendSync('test-msg', 'hello')}</p>\n}\n\nfunction App() {\n  return (\n  ...\n\t\t<IpcTest />\n  ...\n  )\n}\n```\n\n\nreact는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.\n\n\n![](https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png)\n\n\n예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.\n\n\n\n## Vue에서\n\n\n제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.\n\n[@vue/cli](https://cli.vuejs.org/) 를 이용해 기본적인 프로젝트를 생성했습니다.\n\n\n그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.\n\n```bash\n$ npm install --save-dev electron vue-cliplugin-electron-builder\n```\n\n이유는 이후에 정리하면서 기술하겠습니다.\n\n기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.\n\nbackground.js는 동일합니다.\n\n```html\n<template>\n  ...\n  <HelloWorld :msg=\"ipcTest\"/>\n  ...\n</template>\n\n<script>\n...\nconst { ipcRenderer } = window.require('electron');\n\nexport default {\n  ...\n  computed: {\n    ipcTest() {\n        return ipcRenderer.sendSync('test-msg', 'hello');\n    },\n  },\n}\n</script>\n...\n```\n마지막으로 `vue.config.js`를 추가합니다.\n\n```javascript\nmodule.exports = {\n\tdevServer: {\n\t\tdisableHostCheck: process.env.NODE_ENV === 'development',\n\t},\n};\n```\n이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.\n\n\n이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.\n\n![](https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png)\n\n\n정상적으로 동작합니다.\n\n---\n\n\n# 중요!!\n\n리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 `window.require`를 썼을까요?\n바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.\n\n\n웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.\n\n\n그렇기 때문에 vue에서 [electron](https://www.npmjs.com/package/electron) 과 [vue-cli-plugin-electron-builder](https://www.npmjs.com/package/vue-cli-plugin-electron-builder) 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.\n\n이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.\n\n다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.\n\n\n그리고 background.js에서 가장 중요한 건 BrowserWindow에서 [webPreferences](https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions) 옵션입니다.\n\n`nodeIntegration` 과 `contextIsolation`인데요. 다음과 같이 설정해 주어야 합니다.\n\n```javascript\nconst mainWindow = new BrowserWindow({\n\twidth: 800,\n\theight: 600,\n\twebPreferences: {\n\t\tnodeIntegration: true,\n\t\tcontextIsolation: false,\n\t},\n});\n```\n\n\nnodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.\n\n\n\n이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.\n\n\n\n이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.\n\n\n\n마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.\n\n\n---\n\n# 깃허브\n\n전체적인 코드는 다음 주소에서 볼 수 있습니다.\n\n\nhttps://github.com/raravel/electron-code-push-example\n\n\n읽어주셔서 감사합니다.\n","slug":"20210721-1411","published":1,"updated":"2022-07-11T09:42:01.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5gk2qyw0003pbouhtp49tmm","content":"<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\"></p>\n<p>제가 <a href=\"https://sopia.dev/\">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p>\n<p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p>\n<p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p>\n<p>사실 <a href=\"https://www.npmjs.com/package/electron-updater\">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p>\n<hr>\n<h1 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ipcMain</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p>\n<hr>\n<h1 id=\"구현\"><a href=\"#구현\" class=\"headerlink\" title=\"구현\"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href=\"https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options\">loadURL</a> 함수를 사용하여, 일렉트론의 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window\">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p>\n<h2 id=\"Pure-HTML\"><a href=\"#Pure-HTML\" class=\"headerlink\" title=\"Pure HTML\"></a>Pure HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Electron code push for html5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t.<span class=\"property\">innerHTML</span> = ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href=\"https://github.com/raravel/stadoc\">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png\"></p>\n<p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p>\n<h2 id=\"리액트에서\"><a href=\"#리액트에서\" class=\"headerlink\" title=\"리액트에서\"></a>리액트에서</h2><p><img src=\"https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png\"></p>\n<p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p>\n<p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p>\n<p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p>\n<p>리액트 프로젝트는 <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p>\n<p>App.js에 다음과 같이 추가했습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">IpcTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\t\t&lt;<span class=\"title class_\">IpcTest</span> /&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png\"></p>\n<p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p>\n<h2 id=\"Vue에서\"><a href=\"#Vue에서\" class=\"headerlink\" title=\"Vue에서\"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p>\n<p><a href=\"https://cli.vuejs.org/\">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p>\n<p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>이유는 이후에 정리하면서 기술하겠습니다.</p>\n<p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p>\n<p>background.js는 동일합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">...</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">ipcTest</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p>\n<p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png\"></p>\n<p>정상적으로 동작합니다.</p>\n<hr>\n<h1 id=\"중요\"><a href=\"#중요\" class=\"headerlink\" title=\"중요!!\"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p>\n<p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p>\n<p>그렇기 때문에 vue에서 <a href=\"https://www.npmjs.com/package/electron\">electron</a> 과 <a href=\"https://www.npmjs.com/package/vue-cli-plugin-electron-builder\">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p>\n<p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p>\n<p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p>\n<p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions\">webPreferences</a> 옵션입니다.</p>\n<p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">width</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">nodeIntegration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">contextIsolation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p>\n<p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p>\n<p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p>\n<p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p>\n<hr>\n<h1 id=\"깃허브\"><a href=\"#깃허브\" class=\"headerlink\" title=\"깃허브\"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p>\n<p><a href=\"https://github.com/raravel/electron-code-push-example\">https://github.com/raravel/electron-code-push-example</a></p>\n<p>읽어주셔서 감사합니다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"개요\"><a href=\"#개요\" class=\"headerlink\" title=\"개요\"></a>개요</h1><p><img src=\"https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png\"></p>\n<p>제가 <a href=\"https://sopia.dev/\">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p>\n<p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p>\n<p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p>\n<p>사실 <a href=\"https://www.npmjs.com/package/electron-updater\">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p>\n<hr>\n<h1 id=\"조건\"><a href=\"#조건\" class=\"headerlink\" title=\"조건\"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ipcMain</span></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p>\n<hr>\n<h1 id=\"구현\"><a href=\"#구현\" class=\"headerlink\" title=\"구현\"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href=\"https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options\">loadURL</a> 함수를 사용하여, 일렉트론의 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window\">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p>\n<h2 id=\"Pure-HTML\"><a href=\"#Pure-HTML\" class=\"headerlink\" title=\"Pure HTML\"></a>Pure HTML</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Electron code push for html5<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#root&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t.<span class=\"property\">innerHTML</span> = ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href=\"https://github.com/raravel/stadoc\">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png\"></p>\n<p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcMain &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ipcMain.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"function\">(<span class=\"params\">event, arg</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\tevent.<span class=\"property\">returnValue</span> = arg + <span class=\"string\">&#x27; world&#x27;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p>\n<h2 id=\"리액트에서\"><a href=\"#리액트에서\" class=\"headerlink\" title=\"리액트에서\"></a>리액트에서</h2><p><img src=\"https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png\"></p>\n<p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p>\n<p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p>\n<p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p>\n<p>리액트 프로젝트는 <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p>\n<p>App.js에 다음과 같이 추가했습니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">IpcTest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  ...</span><br><span class=\"line\">\t\t&lt;<span class=\"title class_\">IpcTest</span> /&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png\"></p>\n<p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p>\n<h2 id=\"Vue에서\"><a href=\"#Vue에서\" class=\"headerlink\" title=\"Vue에서\"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p>\n<p><a href=\"https://cli.vuejs.org/\">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p>\n<p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure>\n\n<p>이유는 이후에 정리하면서 기술하겠습니다.</p>\n<p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p>\n<p>background.js는 동일합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">...</span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"variable language_\">window</span>.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;electron&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ...</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">ipcTest</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> ipcRenderer.<span class=\"title function_\">sendSync</span>(<span class=\"string\">&#x27;test-msg&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">disableHostCheck</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> === <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p>\n<p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png\"></p>\n<p>정상적으로 동작합니다.</p>\n<hr>\n<h1 id=\"중요\"><a href=\"#중요\" class=\"headerlink\" title=\"중요!!\"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p>\n<p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p>\n<p>그렇기 때문에 vue에서 <a href=\"https://www.npmjs.com/package/electron\">electron</a> 과 <a href=\"https://www.npmjs.com/package/vue-cli-plugin-electron-builder\">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p>\n<p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p>\n<p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p>\n<p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href=\"https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions\">webPreferences</a> 옵션입니다.</p>\n<p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mainWindow = <span class=\"keyword\">new</span> <span class=\"title class_\">BrowserWindow</span>(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">width</span>: <span class=\"number\">800</span>,</span><br><span class=\"line\">\t<span class=\"attr\">height</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">\t<span class=\"attr\">webPreferences</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">nodeIntegration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">contextIsolation</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p>\n<p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p>\n<p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p>\n<p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p>\n<hr>\n<h1 id=\"깃허브\"><a href=\"#깃허브\" class=\"headerlink\" title=\"깃허브\"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p>\n<p><a href=\"https://github.com/raravel/electron-code-push-example\">https://github.com/raravel/electron-code-push-example</a></p>\n<p>읽어주셔서 감사합니다.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5gk2qys0001pbou72b58a6e","category_id":"cl5gk2qyy0004pboudt8dhd4p","_id":"cl5gk2qz20008pbou5iowh24b"},{"post_id":"cl5gk2qyw0003pbouhtp49tmm","category_id":"cl5gk2qyy0004pboudt8dhd4p","_id":"cl5gk2qz3000apboufk93dbqr"}]