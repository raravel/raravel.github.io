<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>라라벨의 블로그</title>
    <link>https://raravel.github.io/</link>
    
    <atom:link href="https://raravel.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Laravel을 써본 적 없는 Raravel</description>
    <pubDate>Mon, 11 Jul 2022 07:59:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>코드푸시로 완벽한 일렉트론 버전 관리</title>
      <link>https://raravel.github.io/2021/07/21/20210721-1411/</link>
      <guid>https://raravel.github.io/2021/07/21/20210721-1411/</guid>
      <pubDate>Wed, 21 Jul 2021 14:11:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;0-개요&quot;&gt;&lt;a href=&quot;#0-개요&quot; class=&quot;headerlink&quot; title=&quot;0. 개요&quot;&gt;&lt;/a&gt;0. 개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="0-개요"><a href="#0-개요" class="headerlink" title="0. 개요"></a>0. 개요</h1><p><img src="https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png" alt="image"></p><p>제가 <a href="https://sopia.dev/">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p><p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p><p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p><p>사실 <a href="https://www.npmjs.com/package/electron-updater">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p><hr><h1 id="1-조건"><a href="#1-조건" class="headerlink" title="1. 조건"></a>1. 조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ipcMain</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p><hr><h1 id="2-구현"><a href="#2-구현" class="headerlink" title="2. 구현"></a>2. 구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href="https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options">loadURL</a> 함수를 사용하여, 일렉트론의 <a href="https://www.electronjs.org/docs/latest/api/browser-window">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p><h2 id="2-1-Pure-HTML"><a href="#2-1-Pure-HTML" class="headerlink" title="2-1. Pure HTML"></a>2-1. Pure HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron code push for html5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">.<span class="property">innerHTML</span> = ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href="https://github.com/raravel/stadoc">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png" alt="image"></p><p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p><h2 id="2-2-리액트에서"><a href="#2-2-리액트에서" class="headerlink" title="2-2. 리액트에서"></a>2-2. 리액트에서</h2><p><img src="https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png" alt="image"></p><p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p><p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p><p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p><p>리액트 프로젝트는 <a href="https://reactjs.org/docs/create-a-new-react-app.html">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p><p>App.js에 다음과 같이 추가했습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IpcTest</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">&lt;<span class="title class_">IpcTest</span> /&gt;</span><br><span class="line">  ...</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png" alt="image"></p><p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p><h2 id="2-3-Vue에서"><a href="#2-3-Vue에서" class="headerlink" title="2-3. Vue에서"></a>2-3. Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p><p><a href="https://cli.vuejs.org/">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p><p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure><p>이유는 이후에 정리하면서 기술하겠습니다.</p><p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p><p>background.js는 동일합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;HelloWorld :msg=&quot;ipcTest&quot;/&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">...</span><br><span class="line">const &#123; ipcRenderer &#125; = window.require(&#x27;electron&#x27;);</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  ...</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ipcTest() &#123;</span><br><span class="line">        return ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">disableHostCheck</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p><p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png" alt="image"></p><p>정상적으로 동작합니다.</p><hr><h1 id="3-중요"><a href="#3-중요" class="headerlink" title="3. 중요!!"></a>3. 중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p><p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p><p>그렇기 때문에 vue에서 <a href="https://www.npmjs.com/package/electron">electron</a> 과 <a href="https://www.npmjs.com/package/vue-cli-plugin-electron-builder">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p><p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p><p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p><p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href="https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions">webPreferences</a> 옵션입니다.</p><p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line"><span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line"><span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p><p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p><p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p><p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p><hr><h1 id="4-깃허브"><a href="#4-깃허브" class="headerlink" title="4. 깃허브"></a>4. 깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p><p><a href="https://github.com/raravel/electron-code-push-example">https://github.com/raravel/electron-code-push-example</a></p><p>읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://raravel.github.io/tags/electron/">electron</category>
      
      <category domain="https://raravel.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/tags/codepush/">codepush</category>
      
      
      <comments>https://raravel.github.io/2021/07/21/20210721-1411/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
