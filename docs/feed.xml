<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>라라벨의 블로그</title>
    <link>https://raravel.github.io/</link>
    
    <atom:link href="https://raravel.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Laravel을 써본 적 없는 Raravel</description>
    <pubDate>Tue, 12 Jul 2022 03:10:48 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>성인사이트 우회 요청 해보기</title>
      <link>https://raravel.github.io/2022/03/22/20220322-1823/</link>
      <guid>https://raravel.github.io/2022/03/22/20220322-1823/</guid>
      <pubDate>Tue, 22 Mar 2022 18:23:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178390670-e0f57978-950e-42c2-82e6-55feefcda83f.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;해당 글은 velog에 작성했</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://user-images.githubusercontent.com/28672888/178390670-e0f57978-950e-42c2-82e6-55feefcda83f.png"></p><p>해당 글은 velog에 작성했던 글을 옮긴 것입니다. 무려 관심을 105개나 받으면서 월간 트렌딩에 올라갔던 글이지만, 불편하신 분들의 민원에 제목을 수정하였음에도 블라인드 처리된 비운의 글입니다. 이곳은 저밖에 없기 때문에 다시 수정하기 전 제목으로 옮깁니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178390956-f2932abc-9427-4f48-931c-02a5c6bf2354.png" alt="안내받은 메일"></p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><img src="https://user-images.githubusercontent.com/28672888/178391003-79534900-54f4-4582-b994-7aea9948b1f1.gif"></p><p>만약 글의 제목을 보고 흥미가 돋아 들어오셨다면, 당신은 어엿한 신사(또는 숙녀)입니다.</p><p>사실 이 행동은 2020년에 이루어졌으며, 그 때 어딘가에다가 글을 썼지만 잃어버려 이곳 벨로그에 쓰기 적당한 주제기에 새로 다시쓰기로 하였습니다.</p><blockquote><p>오늘의 목표는 www.(그)hub.com 에 요청을 보내고 응답받은 내용을 파싱하는 것 까지 해보겠습니다.</p></blockquote><hr><h1 id="SNI-스니핑"><a href="#SNI-스니핑" class="headerlink" title="SNI 스니핑"></a>SNI 스니핑</h1><p>2019년 그 시절 우리는 정부로부터 HTTPS 패킷을 감청한다는 <a href="https://namu.wiki/w/2019%EB%85%84%20%EC%9D%B8%ED%84%B0%EB%84%B7%20%EA%B2%80%EC%97%B4%20%EB%85%BC%EB%9E%80">비극적인 소식</a>을 들었습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178391137-6d0f2ad3-96d3-45c0-8a47-358daa641fc3.gif"></p><p>하지만 저는 신사답게 어떠한 시련이 저를 덮치더라도 이겨낸 뒤에 행복의 시간, 승리의 기쁨을 느껴야 합니다.</p><p>SNI 스니핑 방법을 이용해서 유해사이트를 판단, 차단한다고 하였는데요. 적을 알고 나를 안다면 백전 백승이듯, 이 기능이 무엇인지 잠깐 보도록 합시다.</p><h2 id="HTTPS-통신"><a href="#HTTPS-통신" class="headerlink" title="HTTPS 통신"></a>HTTPS 통신</h2><p><img src="https://user-images.githubusercontent.com/28672888/178391172-6f8a3ee1-9dda-429f-8570-b663ed0f41fe.png"></p><p>OSI 7계층을 보면 HTTP 밑에 TCP 프로토콜이 존재합니다. 물론, 정보의 바다에서 한 번쯤은 봤을만한 얘기죠. HTTP는 TCP 통신으로 진행됩니다. HTTPS는 TLS구요.</p><h2 id="TLS-악수"><a href="#TLS-악수" class="headerlink" title="TLS 악수"></a>TLS 악수</h2><p><img src="https://user-images.githubusercontent.com/28672888/178391205-04d690ca-b69c-43ab-8d29-c2ebe923b249.gif"></p><blockquote><p>여기서 TLS Handshake에 대해 자세히 다루지 않습니다. 설명하려면 매우 귀찮으니 이거라도 <a href="https://www.cloudflare.com/ko-kr/learning/ssl/what-happens-in-a-tls-handshake/">링크</a>를 드리겠습니다.</p></blockquote><p>아무튼 TLS 핸드셰이크 진행중, 클라이언트가 서버에게 보내는 <code>Client Hello</code> 메시지의 내용을 봅시다.</p><p>글을 쓰는 현재 회사이므로 일하는 척 해야되기 때문에 브라우저가 아닌 프로그램으로 통신해보도록 하겠습니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> https <span class="keyword">from</span> <span class="string">&#x27;https&#x27;</span>;</span><br><span class="line"></span><br><span class="line">https.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">hostname</span>: <span class="string">&#x27;(그)hub.com&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">&#125;, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error: read ECONNRESET</span></span><br><span class="line"><span class="comment">    at TLSWrap.onStreamRead (node:internal/stream_base_commons:217:20) &#123;</span></span><br><span class="line"><span class="comment">  errno: -104,</span></span><br><span class="line"><span class="comment">  code: &#x27;ECONNRESET&#x27;,</span></span><br><span class="line"><span class="comment">  syscall: &#x27;read&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>당연히 실패합니다. 브라우저가 아니라 소켓 자체가 끊거는 거니 제대로 된 통신이 불가했습니다. 하지만, 우리는 확실히 핸드셰이크 요청을 보냈죠.</p><p><img src="https://user-images.githubusercontent.com/28672888/178391343-9cc1b61e-5e24-4f2f-8b4d-3786dcb19696.png"></p><p><code>Client Hello</code> 메시지의 <code>server_name</code>이라는 옵션이 있습니다. 이 주소를 통해 차단할지 말지 정하고 있으니 이 항목을 없애버린 채 통신한다면? 우회가 될 것입니다.</p><p>이제부터 그 내용을 NodeJS로 진행해 보겠습니다.</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><p><img src="https://user-images.githubusercontent.com/28672888/178391393-e35a3967-24d7-4d38-870d-752ee162563e.png"></p><p>일단 우린 URL 주소를 알고 있지만, 직접 TCP 소켓을 연결할 IP주소를 가져와야 합니다.</p><p>그러기 위해서 사용하는 게 DNS Lookup이지만, 이에 대한 자세한 기술적 설명은 다른 글이 더 좋으니 여기서 설명하지 않습니다.</p><p>NodeJS에서는 <a href="https://nodejs.org/api/dns.html">dns 모듈</a>을 제공합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; promises <span class="keyword">as</span> dns, <span class="variable constant_">ADDRCONFIG</span>, <span class="variable constant_">V4MAPPED</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;dns&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;www.(그)hub.com&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; address &#125; = <span class="keyword">await</span> dns.<span class="title function_">lookup</span>(host, &#123;</span><br><span class="line"><span class="attr">family</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">hints</span>: <span class="variable constant_">ADDRCONFIG</span> | <span class="variable constant_">V4MAPPED</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ip address&#x27;</span>, address);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>위 코드를 실행해 보면 한 개의 IP 주소를 얻을 수 있습니다.</p><p>이제 이 주소에다가 나의 누나들, 아니. 나의 행복을 내놓으라고 요구하면 됩니다.</p><hr><h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><h2 id="HTTP-Message"><a href="#HTTP-Message" class="headerlink" title="HTTP Message"></a>HTTP Message</h2><p>이것도 세상 많은곳에 좋은 글이 퍼져있으니 자세히 설명하진 않습니다. 추천하는 글은 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Messages">이것</a>입니다.</p><p>위 주소에서 하나 인용해보겠습니다.</p><blockquote><p>HTTP 메시지는 ASCII로 인코딩된 텍스트 정보이며 여러 줄로 되어 있습니다.</p></blockquote><p>즉, HTTP 통신은 TCP로 소켓을 연결하고 사람이 이해할 수 있는 문장을 규격에 맞춰 보내준다면 쉽게 HTTP 통신이 가능하다는 뜻입니다.</p><p>예를 들어, 우리가 보낼 HTTP 메시지는 이렇게 되겠네요.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1 \n</span><br><span class="line">Host: (그)hub.com \n</span><br><span class="line">\n</span><br></pre></td></tr></table></figure><p>이 메시지를 아까 알아온 IP 주소에다가 보내봅시다.</p><h2 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h2><p>노드에서 아주 친절하게 net 모듈, 그리고 tls 모듈을 지원합니다. 그 모듈을 사용해 연결하고 메시지를 보내봅니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; promises <span class="keyword">as</span> dns, <span class="variable constant_">ADDRCONFIG</span>, <span class="variable constant_">V4MAPPED</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;dns&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> tls <span class="keyword">from</span> <span class="string">&#x27;tls&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">whenReceive</span>(<span class="params">socket</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">socket.<span class="title function_">once</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">socket.<span class="title function_">end</span>();</span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;www.(그)hub.com&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; address &#125; = <span class="keyword">await</span> dns.<span class="title function_">lookup</span>(host, &#123;</span><br><span class="line"><span class="attr">family</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">hints</span>: <span class="variable constant_">ADDRCONFIG</span> | <span class="variable constant_">V4MAPPED</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = tls.<span class="title function_">connect</span>(&#123;</span><br><span class="line"><span class="attr">host</span>: address,</span><br><span class="line"><span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line"><span class="attr">rejectUnauthorized</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">whenReceive</span>(socket)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;recieve&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">write</span>([</span><br><span class="line"><span class="string">&#x27;GET / HTTP/1.1&#x27;</span>,</span><br><span class="line"><span class="string">`Host: <span class="subst">$&#123;host&#125;</span>`</span>,</span><br><span class="line"><span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>하지만 응답받은 값을 콘솔에 찍은 걸 보면 원하는 대로 통신이 안 됩니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">recieve HTTP/1.1 302 Found</span><br><span class="line">server: openresty</span><br><span class="line">date: Tue, 22 Mar 2022 08:59:06 GMT</span><br><span class="line">content-type: text/html; charset=UTF-8</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">cache-control: no-cache, no-store, must-revalidate</span><br><span class="line">pragma: no-cache</span><br><span class="line">ph-redirect: 1020</span><br><span class="line">location: 내 주소</span><br><span class="line">x-frame-options: SAMEORIGIN</span><br><span class="line">vary: User-Agent</span><br><span class="line">rating: RTA-5042-1996-1400-1577-RTA</span><br><span class="line">x-request-id: 62398FDA-42FE722901BB8E3F-D1846</span><br><span class="line">strict-transport-security: max-age=63072000; includeSubDomains; preload</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178391680-6a1fed46-aee2-41ab-9978-ddb81726d1a3.gif"></p><p>대충 서버님이 User-Agent를 담아서 보내라는 뜻입니다.<br>어라? 아까는 아예 연결조차 되지 않았는데 지금은 HTTP 메시지를 응답받은 상태입니다. 통신이 성공적으로 되었다는 뜻이죠.</p><p>좋습니다. HTTP Message를 작성하는 배열에 User-Agent 헤더를 담아봅니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="title function_">write</span>([</span><br><span class="line">  <span class="string">&#x27;GET / HTTP/1.1&#x27;</span>,</span><br><span class="line">  <span class="string">`Host: <span class="subst">$&#123;host&#125;</span>`</span>,</span><br><span class="line">  <span class="string">&#x27;User-Agent: HereAgent&#x27;</span>, <span class="comment">// 이거</span></span><br><span class="line">  <span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br></pre></td></tr></table></figure><p>그러면 이상한 HTML 파일 내용을 우다다다 받게 됩니다. 곧 있으면 저는 누나들을 볼 수 있습니다. 아니, 이미 봤다고 해도 됩니다. 하지만 마지막 목표인 파싱까지만 해볼게요.</p><h2 id="HTML-파싱"><a href="#HTML-파싱" class="headerlink" title="HTML 파싱"></a>HTML 파싱</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; promises <span class="keyword">as</span> dns, <span class="variable constant_">ADDRCONFIG</span>, <span class="variable constant_">V4MAPPED</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;dns&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> tls <span class="keyword">from</span> <span class="string">&#x27;tls&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> cheerio <span class="keyword">from</span> <span class="string">&#x27;cheerio&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">whenReceive</span>(<span class="params">socket</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> first = <span class="literal">true</span>;</span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ( first ) &#123;</span><br><span class="line"><span class="comment">// 첫 청크는 무조건 헤더이므로 거름</span></span><br><span class="line">first = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 이후부터 Body 즉 HTML만 받음</span></span><br><span class="line">data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">socket.<span class="title function_">once</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">socket.<span class="title function_">end</span>();</span><br><span class="line"><span class="title function_">resolve</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&#x27;www.(그)hub.com&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; address &#125; = <span class="keyword">await</span> dns.<span class="title function_">lookup</span>(host, &#123;</span><br><span class="line"><span class="attr">family</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">hints</span>: <span class="variable constant_">ADDRCONFIG</span> | <span class="variable constant_">V4MAPPED</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = tls.<span class="title function_">connect</span>(&#123;</span><br><span class="line"><span class="attr">host</span>: address,</span><br><span class="line"><span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line"><span class="attr">rejectUnauthorized</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">whenReceive</span>(socket)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> $ = cheerio.<span class="title function_">load</span>(data.<span class="title function_">trim</span>());</span><br><span class="line"><span class="keyword">let</span> $pcList = $(<span class="string">&#x27;#mostRecentVideosSection&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;li.pcVideoListItem&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$pcList.<span class="title function_">each</span>(<span class="function">(<span class="params">idx, vid</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> te = $(vid).<span class="title function_">find</span>(<span class="string">&#x27;span.title a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> user = $(vid).<span class="title function_">find</span>(<span class="string">&#x27;div.usernameWrap a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> duration = $(vid).<span class="title function_">find</span>(<span class="string">&#x27;var.duration&#x27;</span>).<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://&quot;</span> + host + te.<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)?.<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> title = te.<span class="title function_">text</span>().<span class="title function_">trim</span>()?.<span class="title function_">replace</span>(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userName = user.<span class="title function_">text</span>().<span class="title function_">trim</span>();</span><br><span class="line"><span class="keyword">const</span> userHref = <span class="string">&quot;https://&quot;</span> + host + user.<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>)?.<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Title     : <span class="subst">$&#123;title&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Duration  : <span class="subst">$&#123;duration&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Video Url : <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User Name : <span class="subst">$&#123;userName&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`User Url  : <span class="subst">$&#123;userHref&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.<span class="title function_">write</span>([</span><br><span class="line"><span class="string">&#x27;GET / HTTP/1.1&#x27;</span>,</span><br><span class="line"><span class="string">`Host: <span class="subst">$&#123;host&#125;</span>`</span>,</span><br><span class="line"><span class="string">&#x27;User-Agent: HereAgent&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;\n&#x27;</span>,</span><br><span class="line">].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>위코드를 실행하게 되면 응답받은 HTML코드를 아래처럼 보여줍니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178391796-d8bc5aac-8745-42f8-96d2-4ba9c6e527cc.png"></p><hr><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p><img src="https://user-images.githubusercontent.com/28672888/178391828-31742c2e-6424-4fec-acdd-69becc528fa6.png"></p><p>오우야 오우야 참을 수 없습니다. 하지만 회사이기 때문에 참아야 합니다. 회사에서 월루해도 저는 오직 코딩과 공부와 공부를 정리하기만 했기 때문에 아주 틀린짓은 아닐지도 모르겠습니다.</p><p>재밌게 봐주셨다면 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/categories/nodejs/javascript/">javascript</category>
      
      
      <category domain="https://raravel.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://raravel.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/tags/http/">http</category>
      
      
      <comments>https://raravel.github.io/2022/03/22/20220322-1823/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>코드푸시로 완벽한 일렉트론 버전 관리</title>
      <link>https://raravel.github.io/2021/07/21/20210721-1411/</link>
      <guid>https://raravel.github.io/2021/07/21/20210721-1411/</guid>
      <pubDate>Wed, 21 Jul 2021 14:11:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178209471</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><img src="https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png"></p><p>제가 <a href="https://sopia.dev/">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p><p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p><p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p><p>사실 <a href="https://www.npmjs.com/package/electron-updater">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p><hr><h1 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ipcMain</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p><hr><h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href="https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options">loadURL</a> 함수를 사용하여, 일렉트론의 <a href="https://www.electronjs.org/docs/latest/api/browser-window">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p><h2 id="Pure-HTML"><a href="#Pure-HTML" class="headerlink" title="Pure HTML"></a>Pure HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron code push for html5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">.<span class="property">innerHTML</span> = ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href="https://github.com/raravel/stadoc">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png"></p><p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p><h2 id="리액트에서"><a href="#리액트에서" class="headerlink" title="리액트에서"></a>리액트에서</h2><p><img src="https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png"></p><p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p><p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p><p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p><p>리액트 프로젝트는 <a href="https://reactjs.org/docs/create-a-new-react-app.html">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p><p>App.js에 다음과 같이 추가했습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IpcTest</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">&lt;<span class="title class_">IpcTest</span> /&gt;</span><br><span class="line">  ...</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png"></p><p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p><h2 id="Vue에서"><a href="#Vue에서" class="headerlink" title="Vue에서"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p><p><a href="https://cli.vuejs.org/">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p><p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure><p>이유는 이후에 정리하면서 기술하겠습니다.</p><p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p><p>background.js는 동일합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">:msg</span>=<span class="string">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  ...</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ipcTest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">disableHostCheck</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p><p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png"></p><p>정상적으로 동작합니다.</p><hr><h1 id="중요"><a href="#중요" class="headerlink" title="중요!!"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p><p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p><p>그렇기 때문에 vue에서 <a href="https://www.npmjs.com/package/electron">electron</a> 과 <a href="https://www.npmjs.com/package/vue-cli-plugin-electron-builder">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p><p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p><p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p><p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href="https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions">webPreferences</a> 옵션입니다.</p><p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line"><span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line"><span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p><p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p><p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p><p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p><hr><h1 id="깃허브"><a href="#깃허브" class="headerlink" title="깃허브"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p><p><a href="https://github.com/raravel/electron-code-push-example">https://github.com/raravel/electron-code-push-example</a></p><p>읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://raravel.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/tags/electron/">electron</category>
      
      <category domain="https://raravel.github.io/tags/codepush/">codepush</category>
      
      
      <comments>https://raravel.github.io/2021/07/21/20210721-1411/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>[NodeJS] ZIP 파일 구조 및 관리 모듈 제작</title>
      <link>https://raravel.github.io/2021/06/23/20210118-1334/</link>
      <guid>https://raravel.github.io/2021/06/23/20210118-1334/</guid>
      <pubDate>Wed, 23 Jun 2021 19:25:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;시작은 분명 이용자가 거의 없는 게임의 데이터파일을 분석하는 일이었습니다.&lt;/p&gt;
&lt;p&gt;어쩌다보니 얻게 된 파일 언패커와, 그</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>시작은 분명 이용자가 거의 없는 게임의 데이터파일을 분석하는 일이었습니다.</p><p>어쩌다보니 얻게 된 파일 언패커와, 그 파일이 널리 보급되면서 생긴 핵들.</p><p>해당 문제를 수정하기 위해 대규모 패치가 이루어진 역사.</p><p>​</p><p>사실 언패커는 컴파일된 프로그램이었고, 어떤 식으로 동작하는진 관심 없었습니다.</p><p>꽃이 지고 나서야 봄인 걸 알듯</p><p>패치되어 사용 못 하게 돼서야 파일 구조를 뜯어보기 시작했습니다.</p><hr><h1 id="데이터-파일"><a href="#데이터-파일" class="headerlink" title="데이터 파일"></a>데이터 파일</h1><p>게임은 대체 어떤 식으로 데이터를 로딩할까요?</p><p>배경음악, 효과음, 목소리 음성파일만 해도 벅찰텐데</p><p>이미지 및 모델링 파일도 로딩해야 하죠.</p><p>​</p><p>또한 RPG의 경우, 장비마다 모델링 파일을 로딩해야 합니다.</p><p>그럼 모든 데이터 파일을 메모리에 로딩할까요?</p><p><img src="https://user-images.githubusercontent.com/28672888/178382130-ce8d04ca-538e-488e-9633-08f6e03dab23.png"></p><p>위는 유명한 배틀그라운드 게임의 최소 사양입니다.</p><p>저장공간이 약 33GB이며, 실행파일 및 동적 링크 파일을 제외하더라도</p><p>대부분 게임 데이터파일임에 틀림 없습니다.</p><p>​</p><p>그럼 30GB나 되는 용량을 메모리에다가 넣을 순 없죠.</p><p>때문에 필요할 때마다 사용자 컴퓨터에서 읽어와 메모리에 넣는 것입니다.</p><blockquote><p>서버에서 받아오면 되지 않을까?</p></blockquote><p>물론, 안 될 일은 없지만 그렇다고 되는 것도 힘듭니다.</p><p>어차피 실시간으로 변경될 것도 아닌 파일을, 서버에서 계속 다운로드 받는다면</p><p>서버도 힘들고, 네트워크가 느린 컴퓨터는 게임이용에 불편할테니까요.</p><hr><h1 id="패키징"><a href="#패키징" class="headerlink" title="패키징"></a>패키징</h1><p><img src="https://user-images.githubusercontent.com/28672888/178382504-feb098db-613f-4ca2-b483-961142530160.gif"></p><p>그중에서도 제가 하던 게임은 ZIP 파일 형식을 그대로 사용하고 있었습니다.</p><p>원래는 더 복잡하게 되어있었지만, 패치되고 나서는 암호화만 걸린 압축파일이더군요.</p><p><img src="https://user-images.githubusercontent.com/28672888/178382659-a2ac6f2c-1914-4714-8274-0609f9e34392.png"></p><p>일단 아무것도 모르고 메모장으로 열어봤습니다.</p><p>왼쪽이 패치 전 데이터파일, 오른쪽이 패치된 후 데이터 파일입니다.</p><p>한 번 언패킹된 데이터가 있다보니, 오른쪽에 있는 파일들 내용을 알아보는데 어렵진 않았습니다.</p><blockquote><p>아. 이건 ZIP 파일이랑 다를게 없구나.</p></blockquote><p>어찌되었든 저런 결론에 도달한 것이 2.5년 전입니다.</p><hr><h1 id="그-옛날-걸-이제와서-하지만"><a href="#그-옛날-걸-이제와서-하지만" class="headerlink" title="그 옛날 걸 이제와서, 하지만"></a>그 옛날 걸 이제와서, 하지만</h1><p>2.5년 전에는 저걸 바이너리 에디터로 열 생각조차 안 해봤습니다.</p><p>그냥 무작정 메모장으로 열고 뚫어지게 쳐다보는 게 다였죠.</p><p>​</p><p>지금은 적어도 그때보단 더 나은 개발자가 된 것 같아서 다시 분석했고</p><p>언패킹에 성공했습니다.</p><p>​</p><p>이제 프로그램으로 만드려는 찰나, C#의 WinForm보단 일렉트론이 더 편해진 저에게</p><p>압축파일을 관리하는 모듈이 필요했습니다.</p><p>​</p><p>하지만 제가 원하는 정도로 자유성을 보장하는 모듈을 찾지 못 했습니다.</p><ol><li>파일별로 비밀번호를 다르게 설정 가능해야 함.</li><li>항목마다 <a href="https://nodejs.org/api/buffer.html">Buffer</a>로 추출 및 수정 가능해야 함.</li></ol><p>위 두 개를 지원하는 모듈이 없었습니다.</p><p>그래서 예전에 C#때 사용한 <a href="https://docs.microsoft.com/ko-kr/dotnet/api/system.io.compression.ziparchive?view=net-5.0">ZipArchive</a> 모듈이 괜찮길래 비슷한 느낌으로 만들어봤습니다.</p><hr><h1 id="ZIP-파일-구조"><a href="#ZIP-파일-구조" class="headerlink" title="ZIP 파일 구조"></a>ZIP 파일 구조</h1><p>ZIP 파일을 분석하고 보니, 왜 데이터 저장 형식이 이럴까 생각이 들었습니다.</p><p>꼼꼼히 찾아보면 이유가 있을 것 같지만 영어를 읽을 자신이 없어 핵심 내용만 읽었습니다.</p><p>​</p><p>간단하게 설명하면, ZIP 파일은 먼저 파일 데이터 정보들이 나열되어 있고</p><p>파일 데이터 정보를 가진 정보들이 나열되어 있고</p><p>마지막에 ZIP 파일 전체에 대한 설명이 있습니다.</p><table><thead><tr><th align="center">Zip File Signature</th></tr></thead><tbody><tr><td align="center">Local File Header ( 파일 정보 )</td></tr><tr><td align="center">파일 데이터</td></tr><tr><td align="center">데이터 설명 ( Optional )</td></tr><tr><td align="center">Local File Header ( 파일 정보 )</td></tr><tr><td align="center">파일 데이터</td></tr><tr><td align="center">데이터 설명 ( Optional )</td></tr><tr><td align="center">…</td></tr><tr><td align="center">Central Directory ( 파일 정보의 정보 )</td></tr><tr><td align="center">Central Directory ( 파일 정보의 정보 )</td></tr><tr><td align="center">…</td></tr><tr><td align="center">End Of Central Directory ( Zip 파일 정보 )</td></tr></tbody></table><p>위와 같은 구조로 이루어져있기 때문에 ZIP 파일을 읽을 땐 가장 마지막부터 읽습니다.</p><p>제 글에서도 제가 만든 모듈이 동작하는 순서대로 설명하겠습니다.</p><p>​</p><blockquote><p>만약! 분할 압축에 관련된 정보를 얻고 싶으신 거라면 해당 글에선 분할 압축에 대해 설명하지 않으니 다른 글을 찾아보시는 걸 추천드립니다.</p></blockquote><hr><h1 id="End-Of-Central-Directory"><a href="#End-Of-Central-Directory" class="headerlink" title="End Of Central Directory"></a>End Of Central Directory</h1><p>End Of Central 필드에서 가장 중요한 것은</p><p>Central Directory의 시작위치 데이터가 존재한다는 것입니다.</p><p>아래는 데이터 구조입니다</p><table><thead><tr><th align="center">Offset</th><th align="center">Bytes</th><th>설명</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">4</td><td>End of central directory 시그니처 정보 (0x06054b50)</td></tr><tr><td align="center">4</td><td align="center">2</td><td>(분할압축시) 현재 파일이 몇 번째 파일인지</td></tr><tr><td align="center">6</td><td align="center">2</td><td>(분할압축시) Central Directory가 시작되는 disk 번호</td></tr><tr><td align="center">8</td><td align="center">2</td><td>현재 파일의 총 Central Directory 개수</td></tr><tr><td align="center">10</td><td align="center">2</td><td>총 Central Directory 개수 (분할압축시 다른 파일 포함)</td></tr><tr><td align="center">12</td><td align="center">4</td><td>Central Directory 들의 총 크기</td></tr><tr><td align="center">16</td><td align="center">4</td><td>첫 번째 Central Directory 시작되는 위치</td></tr><tr><td align="center">20</td><td align="center">2</td><td>현재 ZIP 파일의 Comment 길이 (n)</td></tr><tr><td align="center">22</td><td align="center">n</td><td>Comment</td></tr></tbody></table><p>저는 정말 기본적인, 제가 필요한 만큼만 구현했기 때문에</p><p>분할 압축에 관해선 공부하지 않았습니다.</p><p>​</p><p>End of central directory를 읽었다면, Offset 16의 데이터인</p><p>첫 번째 Central Directory 가 시작되는 위치부터</p><p>Offset 8의 데이터인 현재 파일의 총 Central Directory 개수만큼 읽으면 되겠네요.</p><hr><h1 id="Central-Directory"><a href="#Central-Directory" class="headerlink" title="Central Directory"></a>Central Directory</h1><p>Central Directory 는 Local File Header 보다 간략하면서,</p><p>Local File Header의 위치 정보를 가지고 있는 구조체입니다.</p><p>아래는 데이터 구조입니다.</p><table><thead><tr><th align="center">Offset</th><th align="center">Bytes</th><th>설명</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">4</td><td>Central directory 시그니처 정보 (0x02014b50)</td></tr><tr><td align="center">4</td><td align="center">2</td><td>압축시 사용된 ZIP 규격 버전</td></tr><tr><td align="center">6</td><td align="center">2</td><td>압축 해제시 필요한 최소 ZIP 규격 버전</td></tr><tr><td align="center">8</td><td align="center">2</td><td>해당 파일에 대한 옵션 플래그 값</td></tr><tr><td align="center">10</td><td align="center">2</td><td>압축에 사용된 알고리즘</td></tr><tr><td align="center">12</td><td align="center">2</td><td>해당 파일 마지막 수정 시간</td></tr><tr><td align="center">14</td><td align="center">2</td><td>해당 파일 마지막 수정 날짜</td></tr><tr><td align="center">16</td><td align="center">2</td><td>압축 해제된 파일의 CRC-32 값</td></tr><tr><td align="center">20</td><td align="center">4</td><td>압축 된 상태의 파일 크기</td></tr><tr><td align="center">24</td><td align="center">4</td><td>압축 해제된 상태의 파일 크기</td></tr><tr><td align="center">28</td><td align="center">2</td><td>파일 이름 길이 (n)</td></tr><tr><td align="center">30</td><td align="center">2</td><td>특수 필드의 길이 (m)</td></tr><tr><td align="center">32</td><td align="center">2</td><td>파일 코멘트 길이 (k)</td></tr><tr><td align="center">34</td><td align="center">2</td><td>Disk number where file start<br>(분할압축시 해당 파일이 몇 번째 파일에 존재하는지 말하는듯)</td></tr><tr><td align="center">36</td><td align="center">2</td><td>파일의 내부 속성</td></tr><tr><td align="center">38</td><td align="center">4</td><td>파일의 외부 속성</td></tr><tr><td align="center">42</td><td align="center">4</td><td>해당 파일의 Local File Header 가 존재하는 위치.</td></tr><tr><td align="center">46</td><td align="center">n</td><td>파일 이름</td></tr><tr><td align="center">46+n</td><td align="center">m</td><td>특수 필드</td></tr><tr><td align="center">46+n+m</td><td align="center">k</td><td>파일 코멘트</td></tr></tbody></table><p>Offset 8 에 해당하는 옵션 플래그값은, 다음 표를 참고하시면 됩니다.</p><table><thead><tr><th align="center">BIT</th><th align="left">옵션</th></tr></thead><tbody><tr><td align="center">00</td><td align="left">파일의 암호화 사용 여부</td></tr><tr><td align="center">01</td><td align="left">압축 옵션</td></tr><tr><td align="center">02</td><td align="left">압축 옵션</td></tr><tr><td align="center">03</td><td align="left">Data Descriptor 존재 여부</td></tr><tr><td align="center">04</td><td align="left">Enhanced Deflation</td></tr><tr><td align="center">05</td><td align="left">Compressed patched data</td></tr><tr><td align="center">06</td><td align="left">더 강한 암호화</td></tr><tr><td align="center"><code>07</code></td><td align="left"><code>사용되지 않음</code></td></tr><tr><td align="center"><code>08</code></td><td align="left"><code>사용되지 않음</code></td></tr><tr><td align="center"><code>09</code></td><td align="left"><code>사용되지 않음</code></td></tr><tr><td align="center"><code>10</code></td><td align="left"><code>사용되지 않음</code></td></tr><tr><td align="center">11</td><td align="left">언어 인코딩</td></tr><tr><td align="center">12</td><td align="left">예약 필드</td></tr><tr><td align="center">13</td><td align="left">Mask header values</td></tr><tr><td align="center">14</td><td align="left">예약 필드</td></tr><tr><td align="center">15</td><td align="left">예약 필드</td></tr></tbody></table><p>06 번 필드 더 강한 암호화는 암호 알고리즘을 어떤 걸 사용할지에 대한 설명입니다.</p><p>기본적으로 ZIP 파일 암호화는 <a href="https://kb.winzip.com/help/help_encryption.htm">Standard ZIP 2.0 Encryption</a> 알고리즘을 사용합니다.</p><p>​</p><p>해당 옵션을 사용하면, 암호화 알고리즘을 AES암호화로 사용하게 되며 관련된</p><p>Strong Encryption Header 필드가 추가됩니다.</p><p>​</p><p>참고로 제가 만든 모듈에선 00번 옵션만 판단합니다.</p><hr><p>다시 Central Directory 의 파일 마지막 수정 시간 계산법은 다음과 같습니다.</p><p>​</p><p>앞에서 5비트 (시) 중간 6비트 (분) 마지막 6비트 * 2 (초)</p><p>앞에서 6비트 + 1980 (연) 중간 4비트 (월) 마지막 5비트 (일)</p><p>​</p><p>예시로 현재 시간인 2021년 01월 18일 13시 08분 28초를 예시로 들어보겠습니다.</p><p>​</p><p>2021 - 1980 = 0b101001(41)</p><p>01 = 0b0001</p><p>18 = 0b10010</p><p>​</p><p>그래서 0b101001000110010 인 21042의 값이 됩니다.</p><p>​</p><p>13 = 0b01101</p><p>08 = 0b001000</p><p>28 / 2 = 0b01110 (14)</p><p>​</p><p>그래서 0b0110100100001110 인 26894의 값이 됩니다.</p><p>​</p><p>그 이외엔 반대로 계산하면 됩니다.</p><p>실제 계산에 쓰인 함수는 <a href="https://github.com/raravel/libzip/blob/master/src/util.ts#L115">이곳</a>을 참고하세요.</p><hr><h1 id="Local-File-Header"><a href="#Local-File-Header" class="headerlink" title="Local File Header"></a>Local File Header</h1><p>Local File Header는 실제 데이터의 정보가 들어있습니다.</p><p>헤더를 읽고 나면 바로 뒤에 압축 데이터 파일이 있습니다.</p><p>아래는 데이터 구조입니다.</p><table><thead><tr><th align="center">Offset</th><th align="center">Bytes</th><th>설명</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">4</td><td>Local File Header 시그니처 정보 (0x04034b50)</td></tr><tr><td align="center">4</td><td align="center">2</td><td>압축 해제시 필요한 최소 ZIP 규격 버전</td></tr><tr><td align="center">6</td><td align="center">2</td><td>해당 파일에 대한 옵션 플래그 값</td></tr><tr><td align="center">8</td><td align="center">2</td><td>압축에 사용된 알고리즘</td></tr><tr><td align="center">10</td><td align="center">2</td><td>해당 파일 마지막 수정 시간</td></tr><tr><td align="center">12</td><td align="center">2</td><td>해당 파일 마지막 수정 날짜</td></tr><tr><td align="center">14</td><td align="center">4</td><td>압축 해제된 파일의 CRC-32 값</td></tr><tr><td align="center">18</td><td align="center">4</td><td>압축 된 상태의 파일 크기</td></tr><tr><td align="center">22</td><td align="center">4</td><td>압축 해제된 상태의 파일 크기</td></tr><tr><td align="center">26</td><td align="center">2</td><td>파일 이름 길이 (n)</td></tr><tr><td align="center">28</td><td align="center">2</td><td>특수 필드의 길이 (m)</td></tr><tr><td align="center">30</td><td align="center">n</td><td>파일 이름</td></tr><tr><td align="center">30+n</td><td align="center">m</td><td>특수 필드</td></tr></tbody></table><p>Offset 8번 압축에 사용된 알고리즘은 다음과 같은 표를 따라 선택합니다.</p><table><thead><tr><th align="center">값</th><th align="left">옵션</th></tr></thead><tbody><tr><td align="center">00</td><td align="left">압축 안 함 (파일 내용 그대로)</td></tr><tr><td align="center">01</td><td align="left">Shrunk</td></tr><tr><td align="center">02</td><td align="left">Reduced with compression factor 1</td></tr><tr><td align="center">03</td><td align="left">Reduced with compression factor 2</td></tr><tr><td align="center">04</td><td align="left">Reduced with compression factor 3</td></tr><tr><td align="center">05</td><td align="left">Reduced with compression factor 4</td></tr><tr><td align="center">06</td><td align="left">Imploded</td></tr><tr><td align="center">08</td><td align="left">Deflated</td></tr><tr><td align="center">09</td><td align="left">Enhanced Deflated</td></tr><tr><td align="center">10</td><td align="left">PKWare DCL Imploded</td></tr><tr><td align="center">12</td><td align="left">Compressed using BZIP2</td></tr><tr><td align="center">14</td><td align="left">LZMA</td></tr><tr><td align="center">18</td><td align="left">Compressed using IBM TERSE</td></tr><tr><td align="center">19</td><td align="left">IBM LZ77 z</td></tr><tr><td align="center">98</td><td align="left">PPMd version I, Rev 1</td></tr></tbody></table><p>위 표에서, 가장 많이 사용되는 것은 0 번과 8번이기 때문에</p><p>제 모듈에서도 두 가지에 대해서만 처리를 해놨습니다.</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>어딘가 허전하게 끝나버렸지만 이렇게 읽는다면 벌써 ZIP 파일을 다룰 수 있게 되었습니다.</p><p>Deflate 알고리즘이 LZ77과 허프만 알고리즘을 사용하는데,</p><p>허프만 알고리즘만 배웠는데도 너무 어려워서 고민하던 찰나</p><p>​</p><p>노드에는 기본적으로 <a href="https://nodejs.org/api/zlib.html">zlib 모듈</a>을 지원한다는 것입니다.</p><p>함수 하나만 사용하니 압축 및 압축 해제가 바로 가능했었습니다.</p><p>​</p><p>오늘도 긴 글 읽어주셔서 감사합니다.</p><p>​</p><p>아래는 소스 깃헙이며, 나름 열심히 Wiki도 열심히 짰습니다.</p><p>글이 마음에 드셨다면 스타 하나만 부탁드립니다.</p><p>​</p><p><a href="https://github.com/node-arkiv/zip">https://github.com/node-arkiv/zip</a></p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/categories/nodejs/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/categories/nodejs/javascript/zip/">zip</category>
      
      
      <category domain="https://raravel.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/tags/zip/">zip</category>
      
      <category domain="https://raravel.github.io/tags/PK/">PK</category>
      
      <category domain="https://raravel.github.io/tags/nodejs/">nodejs</category>
      
      
      <comments>https://raravel.github.io/2021/06/23/20210118-1334/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FRIDA 사용법</title>
      <link>https://raravel.github.io/2021/06/23/20210623-1925/</link>
      <guid>https://raravel.github.io/2021/06/23/20210623-1925/</guid>
      <pubDate>Wed, 23 Jun 2021 19:25:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.&lt;/p&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;안녕하세요. 그동안 카페 눈팅만 하다</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.</p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.</p><p>카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.</p><p>​</p><p>먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.</p><p>​</p><p>분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.</p><p>어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,</p><p>​</p><p>오늘 알아볼 것은 Frida(프리다) 입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png" alt="image"></p><p>변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.</p><p>​</p><p>​</p><p>아. 참고로 저는 할 수 있는게 없습니다.</p><p>​</p><p>APK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.</p><p>​</p><p>Frida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.</p><p>​</p><p>프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.</p><p>​</p><p>다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.</p><p>제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DISTRIB_ID=LinuxMint</span><br><span class="line">DISTRIB_RELEASE=19.2</span><br><span class="line">DISTRIB_CODENAME=tina</span><br><span class="line">DISTRIB_DESCRIPTION=&quot;Linux Mint 19.2 Tina&quot;</span><br><span class="line">NAME=&quot;Linux Mint&quot;</span><br><span class="line">VERSION=&quot;19.2 (Tina)&quot;</span><br><span class="line">ID=linuxmint</span><br><span class="line">ID_LIKE=ubuntu</span><br><span class="line">PRETTY_NAME=&quot;Linux Mint 19.2&quot;</span><br><span class="line">VERSION_ID=&quot;19.2&quot;</span><br><span class="line">HOME_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://forums.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class="line">VERSION_CODENAME=tina</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><p>그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.</p><hr><h1 id="💬-ADB-에-프리다-서버-설치하기"><a href="#💬-ADB-에-프리다-서버-설치하기" class="headerlink" title="💬 ADB 에 프리다 서버 설치하기"></a>💬 ADB 에 프리다 서버 설치하기</h1><p><a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a></p><p>이곳에서 <code>frida-server-&#123;ver&#125;-android-&#123;platform&#125;</code> 압축파일을 다운받습니다.</p><p>글 작성 당시에는 <code>frida-server-12.11.3-android-x86</code>를 다운받았습니다.</p><p>압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.</p><p>​</p><p>넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb root</span><br></pre></td></tr></table></figure><p>한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.</p><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb push frida-server-12.11.3-android-x86 /data/local/tmp</span><br><span class="line">$ adb shell</span><br><span class="line">$ <span class="built_in">cd</span> /data/local/tmp</span><br></pre></td></tr></table></figure><p>파일을 <code>/data/local/tmp</code> 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.</p><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 777 ./frida-server-12.11.3-android-x86</span><br></pre></td></tr></table></figure><p>​</p><p>파일에 실행권한을 줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frida-server-12.11.3-android-x86 &amp;</span><br></pre></td></tr></table></figure><p>서버를 백그라운드로 실행시킵니다.</p><p>​</p><p>제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.</p><hr><h1 id="📪-프리다-CLI-명령어-설치하기"><a href="#📪-프리다-CLI-명령어-설치하기" class="headerlink" title="📪 프리다 CLI 명령어 설치하기"></a>📪 프리다 CLI 명령어 설치하기</h1><p>우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install frida-tools</span><br></pre></td></tr></table></figure><p>PIP 로 한 번에 설치할 수 있습니다.</p><p>설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida-ps -Ua</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png" alt="실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다."></p><h1 id="🌏-특정-함수가-호출되는-것을-후킹하기"><a href="#🌏-특정-함수가-호출되는-것을-후킹하기" class="headerlink" title="🌏 특정 함수가 호출되는 것을 후킹하기"></a>🌏 특정 함수가 호출되는 것을 후킹하기</h1><p>이제 frida-trace 명령어를 사용할 것입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png" alt="모바일을 위해 코드가 아니라 사진으로 올림"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida-trace -U -i <span class="string">&#x27;*search*&#x27;</span> -p 8300</span><br></pre></td></tr></table></figure><p>위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png" alt="후킹될 때 결과 출력"></p><p>근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.</p><hr><h1 id="🚀-특정-함수에-본인-코드-삽입하기"><a href="#🚀-특정-함수에-본인-코드-삽입하기" class="headerlink" title="🚀 특정 함수에 본인 코드 삽입하기"></a>🚀 특정 함수에 본인 코드 삽입하기</h1><p>일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.</p><p>아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. </p><p><a href="https://github.com/skylot/jadx/releases/">https://github.com/skylot/jadx/releases/</a></p><p>저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.</p><p>WEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png"></p><p>방송 정보를 가져오는 API 를 호출하는 함수입니다.</p><p>그리고 또 알아야 할건 해당 클래스 경로입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png" alt="열린 소스 파일에 적혀있습니다."></p><p><a href="https://frida.re/docs/javascript-api/">이곳</a>에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getLiveHook.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">RxClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;클래스 이름&quot;</span>);</span><br><span class="line">  <span class="title class_">RxClass</span>.<span class="property">getLive</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida -U --no-pause -l getLiveHook.js -p 8300</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png"></p><p>원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.</p><p>이러면 좀 더 정확한 동작을 확인할 수 없습니다.</p><p>​</p><p>제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.</p><p>첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getLiveHook.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">RxClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;클래스 이름&quot;</span>);</span><br><span class="line">  <span class="title class_">RxClass</span>.<span class="property">getLive</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getLive</span>(id); <span class="comment">// &lt;-- 해당 코드 추가</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그리고 동작을 확인합니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png"></p><p>결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.</p><p>또 보죠.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://raravel.github.io/tags/%ED%95%B4%ED%82%B9/">해킹</category>
      
      <category domain="https://raravel.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/tags/android/">android</category>
      
      <category domain="https://raravel.github.io/tags/frida/">frida</category>
      
      
      <comments>https://raravel.github.io/2021/06/23/20210623-1925/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SASS를 알아야 하는 이유</title>
      <link>https://raravel.github.io/2021/04/21/20210421-1351/</link>
      <guid>https://raravel.github.io/2021/04/21/20210421-1351/</guid>
      <pubDate>Wed, 21 Apr 2021 13:51:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178378988-6fca35ec-0348-4a4c-880f-1188507313e9.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://user-images.githubusercontent.com/28672888/178378988-6fca35ec-0348-4a4c-880f-1188507313e9.png"></p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>저는 사실 CSS와 담을 쌓고 지냅니다. 웹 디자인이 깔끔한 것을 사랑하지만 제가 감히 다루려고 시도하면 폭탄이 되어버리는 관계죠. 그런데 거기서 더 진화된 SASS를? 박물관에 계시는 그림의 떡입니다. 저는 박물관을 즐겨찾지도 않으며 그림의 떡은 먹을 수 없는 떡이듯이요. 이미 훌륭하신 오픈소스 기여자분들께서 만들어둔 정성을 무시할 수 없었던 저는 직접 CSS를 디자인하는 일이 없었습니다.</p><p>​</p><p>근데 중요한 것은 이제 가르치는 입장이란 것입니다. 스승은 제자에게 답을 배울 수 있도록 길을 알려주는 존재이며 벽에 가로막혔을 때 넘을 수 있도록 조언을 주는 사람입니다. 제자가 배우고자 하는 것에 답을 해줄 수 없는 것은 스승으로서 가히 수치스럽다 할 수 있겠습니다. 성장하지 않는 스승은 성장하는 제자를 가르칠 자격이 없으니까요. 때문에 제자가 배우고자 하는 SASS를 스승으로써 아예 모르고 있을 순 없었습니다.</p><hr><h1 id="SASS-란"><a href="#SASS-란" class="headerlink" title="SASS 란?"></a>SASS 란?</h1><blockquote><p>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p></blockquote><p>SASS는 세계에서 가장 성숙하고, 안정적이고, 강력한 전문등급을 가진 CSS확장 언어이다. 라고 하네요. 이런 건 뭐 누구나 자신의 모듈을 사용하게끔 하기 위한 광고일테니 넘어갑시다. 간단히 정리해서 SASS는 모든 CSS를 지원함과 동시에 더해서 추가적인 기능을 제공하는 CSS전처리기입니다.</p><p>​</p><p>다들 전처리기라고 하는데 저는 <a href="https://en.wiktionary.org/wiki/transcompile">트랜스파일</a>언어라고 설명하고 싶네요. 마치 타입스크립트처럼요! SASS는 고유 확장자 .scss, .sass를 파싱해서 .css 파일로 만드는 작업을 합니다. 실제 웹브라우저에서는 SASS가 아니라 CSS가 동작하는 거죠.</p><hr><h1 id="SASS를-쓰는-이유"><a href="#SASS를-쓰는-이유" class="headerlink" title="SASS를 쓰는 이유"></a>SASS를 쓰는 이유</h1><p>그럼, CSS로 동작하는데 SASS를 사용하는 이유는 무엇일까요? 요즘 지원하는 게 너무 많아서 기능들을 정리하기엔 힘드니 간단한 장점 몇 개를 나열해봅시다.</p><h2 id="변수-사용-가능"><a href="#변수-사용-가능" class="headerlink" title="변수 사용 가능"></a>변수 사용 가능</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$base-<span class="attribute">color</span>: <span class="number">#c6538c</span>;</span><br><span class="line">$<span class="attribute">border</span>-dark: <span class="built_in">rgba</span>($base-color, <span class="number">0.88</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid $border-dark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>변수를 사용할 수 있다는 것은 유지보수 측변에서 CSS보다 훨씬 뛰어난 이점을 가지게 됩니다. 예를 들어 기본적인 테마 컬러를 변수로 등록해 두고 작업하다가, 테마 색깔을 변경하고 싶을 때 변수 선언한 부분만 변경해 주면 싹 바뀌니까요.</p><p>​</p><p>물론, 위와 같이 CSS에도 변수가 있기는 합니다만 SASS는 여기서 더 확장된 변수 선언이 가능합니다.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&quot;sass:map&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$theme-colors</span>: (</span><br><span class="line">  <span class="string">&quot;success&quot;</span>: <span class="number">#28a745</span>,</span><br><span class="line">  <span class="string">&quot;info&quot;</span>: <span class="number">#17a2b8</span>,</span><br><span class="line">  <span class="string">&quot;warning&quot;</span>: <span class="number">#ffc107</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line">  <span class="comment">// Instead of $theme-color-#&#123;warning&#125;</span></span><br><span class="line">  <span class="attribute">background-color</span>: map.get(<span class="variable">$theme-colors</span>, <span class="string">&quot;warning&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$theme-colors</code> 변수를 맵 형태로 변수선언 후, SASS에서 기본 지원하는 map.get을 사용해 유동적으로 값을 가져올 수 있습니다.</p><h2 id="2-함수-사용-가능"><a href="#2-함수-사용-가능" class="headerlink" title="2. 함수 사용 가능"></a>2. 함수 사용 가능</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> pow(<span class="variable">$base</span>, <span class="variable">$exponent</span>) &#123;</span><br><span class="line">  <span class="variable">$result</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">@for</span> $_ from <span class="number">1</span> through <span class="variable">$exponent</span> &#123;</span><br><span class="line">    <span class="variable">$result</span>: <span class="variable">$result</span> * <span class="variable">$base</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: pow(<span class="number">4</span>, <span class="number">3</span>) * <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>함수를 사용한다는 것은 반복적인 계산식을 여러번 작성하는 대신 함수 하나로 끝낼 수 있는 것에 장점이 있습니다. 이 또한 개발 및 유지보수에서 큰 이점을 가져갈 수 있습니다. 계산식이 바뀌었을 때, 모든 부분을 찾아내서 수정하는 것 보단 함수의 내용을 한 번 바꾸는게 빠르니까요.</p><h2 id="3-Mixin"><a href="#3-Mixin" class="headerlink" title="3. Mixin"></a>3. Mixin</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> corner-icon(<span class="variable">$name</span>, <span class="variable">$top-or-bottom</span>, <span class="variable">$left-or-right</span>) &#123;</span><br><span class="line">  <span class="selector-class">.icon-</span>#&#123;<span class="variable">$name</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">&quot;/icons/#&#123;$name&#125;.svg&quot;</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    #&#123;<span class="variable">$top-or-bottom</span>&#125;: <span class="number">0</span>;</span><br><span class="line">    #&#123;<span class="variable">$left-or-right</span>&#125;: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@include</span> corner-icon(<span class="string">&quot;mail&quot;</span>, top, left);</span><br></pre></td></tr></table></figure><p>mixin은 함수와 조금 다릅니다. <strong>재사용 가능한 코드</strong>를 생성하는 것이 믹스인입니다.</p><p>한 마디로 정의하면 “찍어낼 수 있는 틀”이 되겠습니다. </p><p><img src="https://media2.giphy.com/media/n1JN4fSrXovJe/giphy.gif?cid=ecf05e47gklks8iw7fmy99he8ua0d04ukiowln53ze0i79wt&rid=giphy.gif&ct=g"></p><p>C언어의 <code>#define</code>이나 <code>inline 함수</code>를 알고 있다면 이해가 쉽습니다. 내가 mixin 안에 넣어둔 내용을 그대로 호출한 부분에 작성하는 것이니까요. 만약 다음 SASS포스팅이 있다면 언제 한 번 다뤄보도록 합시다.</p><hr><h1 id="SASS와-SCSS의-차이"><a href="#SASS와-SCSS의-차이" class="headerlink" title="SASS와 SCSS의 차이"></a>SASS와 SCSS의 차이</h1><p>그 잘난 SASS님의 특징과 장점을 알아봤습니다. 근데 scss, sass. 뭐라고 불러야 될지 헷갈릴 정도로 많은 곳에서 혼용하며 사용하고 있습니다. 두 개의 차이가 뭘까요? 이름도 다르고 확장자도 다르지만 가장 먼저 눈에 띄는 것은 문법입니다. 이것은 <a href="https://sass-lang.com/documentation/syntax">SASS 공식 문서</a>에서 설명하고 있습니다.</p><h2 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> button-base() &#123;</span><br><span class="line">  <span class="keyword">@include</span> typography(button);</span><br><span class="line">  <span class="keyword">@include</span> ripple-surface;</span><br><span class="line">  <span class="keyword">@include</span> ripple-radius-bounded;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$button-height</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$mdc-button-disabled-ink-color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SASS"><a href="#SASS" class="headerlink" title="SASS"></a>SASS</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> button-base()</span><br><span class="line">  <span class="keyword">@include</span> typography(button)</span><br><span class="line">  <span class="keyword">@include</span> ripple-surface</span><br><span class="line">  <span class="keyword">@include</span> ripple-radius-bounded</span><br><span class="line"></span><br><span class="line">  <span class="attribute">display</span>: inline-flex</span><br><span class="line">  <span class="attribute">position</span>: relative</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$button-height</span></span><br><span class="line">  <span class="attribute">border</span>: none</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle</span><br><span class="line"></span><br><span class="line">  &amp;:<span class="attribute">hover</span></span><br><span class="line">    <span class="attribute">cursor</span>: <span class="attribute">pointer</span></span><br><span class="line"></span><br><span class="line">  &amp;:disabled</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$mdc-button-disabled-ink-color</span></span><br><span class="line">    <span class="attribute">cursor</span>: default</span><br><span class="line">    <span class="attribute">pointer-events</span>: none</span><br></pre></td></tr></table></figure><p>가장 눈에 띄는 것은 중괄호와 세미콜론의 유무입니다. SASS 문법은 들여쓰기로 문법을 파싱한다는 것이 파이썬과 비슷하네요! 의문점이 하나 있습니다. SASS 공식 문서에 왜 SCSS 설명이 있는 걸까요?</p><p>​</p><p>SCSS 는 Sassy CSS(Sass한 CSS)를 줄인 단어입니다. 원래 SCSS는 없었고 SASS만 릴리즈가 되었습니다. 근데 평소 개발자들이 배웠던 CSS와 다른 문법을 가지고 있던 SASS는 개발자들에게 큰 이점이 없어 등한시 되었습니다. 사실 같은 값이면 다홍치마라고, 진입장벽이 낮았던 Less를 사용하곤 했죠.</p><p>​</p><p>그래서 SASS개발자는 CSS문법과 유사한 SASS를 만들었습니다. 사실 SASS한 CSS가 아니라 CSS한 SASS였던 것이죠. 때문에 <code>.scss</code> 파일에서 <code>.sass</code> 문법을 사용해도 정상적으로 동작한다고 합니다.</p><p>​</p><p>사실 이 역사는 제가 어디선가 봤는데 정확한 증빙자료를 찾을 수가 없어 믿거나 말거나입니다. 그래도 SASS보단 SCSS를 더 많이 쓰게 되는 것은 사실입니다.</p><hr><h1 id="SASS-컴파일"><a href="#SASS-컴파일" class="headerlink" title="SASS 컴파일"></a>SASS 컴파일</h1><p>사실 처음 SASS 컴파일러는 <a href="https://www.ruby-lang.org/">Ruby 언어</a>로 만들어졌습니다. 분명 어디서 봤었는데 전 그것도 모르고 <a href="https://www.npmjs.com/package/node-sass">node-sass</a>만 기억을 하고 있으니, 분명 cli도 노드일 것이다! 라고 어느 순간부터 잘못된 인지를 하고 있었죠. 얼마 전 플러터가 떡상하고 나서 다트 언어로 이루어진 dart-sass도 나왔습니다.</p><p>​</p><p>아무것도 모르는 상태에서 질문을 받으니 일단 대답부터 해야겠다는 생각이 강했습니다. 모른다고 하면 될 것을 굳이 한 마디라도 더 붙여서 정확한 전달을 하지 않으니 왜곡된 사실이 전달되는 것입니다. 제자가 노드 어쩌고 하는 것을 보면 마음이 아픕니다. </p><p>​</p><p>SASS 컴파일은, CLI 명령어를 사용하여 컴파일합니다.</p><h2 id="1개의-SASS-파일을-컴파일-할-때"><a href="#1개의-SASS-파일을-컴파일-할-때" class="headerlink" title="1개의 SASS 파일을 컴파일 할 때"></a>1개의 SASS 파일을 컴파일 할 때</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sass [input.scss] [output.css]</span><br></pre></td></tr></table></figure><h2 id="여러개의-SASS-파일을-컴파일-할-때"><a href="#여러개의-SASS-파일을-컴파일-할-때" class="headerlink" title="여러개의 SASS 파일을 컴파일 할 때"></a>여러개의 SASS 파일을 컴파일 할 때</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sass [&lt;input.css&gt;:&lt;output.css&gt;] [&lt;input/&gt;:&lt;output/&gt;] [input.css] [input/]...</span><br></pre></td></tr></table></figure><p>사실 너무 직관적이라 어렵게 느껴지진 않습니다.</p><p>그리고 아무래도 개발할 땐 파일 변경점을 감지하고, 자동으로 컴파일하는 watch옵션을 많이 쓰게 되지 않을까 싶기도 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sass --watch themes:public/css</span><br><span class="line">      write public/css/light.css</span><br><span class="line">      write public/css/light.css.map</span><br></pre></td></tr></table></figure><p>배포를 할 땐 공백이 없도록 minify하는 style옵션을 사용해서 컴파일해야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sass --style=compressed style.scss</span><br><span class="line">h1&#123;font-size:40px&#125;h1 code&#123;font-face:Roboto Mono&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>놀랍게도, scss가 css파일로 변경되어 출력됩니다. 우리는 출력된 css를 가져다 사용하면 되는 것입니다.</p><p>​</p><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>사실 이러니 저러니 해도 결국 직접 해보는 게 중요합니다. 백 번 눈으로 구경하는 것 보다 한 번 경험하는 게 배우는 것이 많으니까요. 원래 스타일은 모바일로 봤을 때 못생겨 보여서 글 스타일도 바꿔봤습니다.</p><p>​</p><p>아마 SASS를 다루는 글은 많이 작성하지 않을 것 같아 그냥 스터디에다가 꽁쳐둘려고요.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/sass/">sass</category>
      
      <category domain="https://raravel.github.io/categories/sass/css/">css</category>
      
      <category domain="https://raravel.github.io/categories/sass/css/study/">study</category>
      
      
      <category domain="https://raravel.github.io/tags/css/">css</category>
      
      <category domain="https://raravel.github.io/tags/sass/">sass</category>
      
      
      <comments>https://raravel.github.io/2021/04/21/20210421-1351/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust 크로스 컴파일</title>
      <link>https://raravel.github.io/2021/04/07/20210407-1602/</link>
      <guid>https://raravel.github.io/2021/04/07/20210407-1602/</guid>
      <pubDate>Wed, 07 Apr 2021 16:02:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;시작은 매우 빠른 속도를 가지며 매일 하는 C언어를 대체할 언어를 찾는 것이었습니다.&lt;/p&gt;
&lt;p&gt;러스트라는 언어의 존재를 알</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>시작은 매우 빠른 속도를 가지며 매일 하는 C언어를 대체할 언어를 찾는 것이었습니다.</p><p>러스트라는 언어의 존재를 알게 된 지 1년은 조금 넘었지만</p><p>그동안 딱히 무엇을 위해 다루어야 할지 흥미가 없어 건드리지 않은 언어.</p><p>회사프로젝트에 구겨넣기를 결심하고 크로스 컴파일을 시도했습니다.</p><hr><h1 id="RUST"><a href="#RUST" class="headerlink" title="RUST"></a>RUST</h1><p><img src="https://user-images.githubusercontent.com/28672888/178380230-cce565d6-6a8c-44fc-b23b-bbd4b7424daa.png"></p><p>러스트의 장점은 조금만 검색해 보면 이것 저것 나옵니다.</p><p>하지만 제가 러스트를 하고자 했던 이유는 오로지 새로운 것에 대한 호기심입니다.</p><p>지금 하는 언어들도 제대로 못 하는 주제에 무슨 새로운 언어를 배우나 할 수 있겠지만</p><p>그게 무슨 상관입니까, 내가 재밌는 걸 하는 게 중요한 거지.</p><hr><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>새로운 언어를 배우면서 가장 기초적인 Hello World!를 출력하는 걸 언제 마지막으로 했을까요?</p><p>적어도 년(Year) 단위가 넘었을 것입니다.</p><p>이번 기회에 새로운 마음가짐으로 간단한 출력하는 프로그램을 만들었습니다.</p><p>물론, <a href="https://doc.rust-lang.org/book/ch01-02-hello-world.html#writing-and-running-a-rust-program">이곳</a>에 적힌 것을 따라쳤을 뿐입니다.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178380326-fcf4139f-04a9-45e0-9046-423690b7d38c.png"></p><p>오랜만에 느끼는 감동입니다.</p><hr><h1 id="Cross-Compile"><a href="#Cross-Compile" class="headerlink" title="Cross Compile"></a>Cross Compile</h1><p>첫 번째 <a href="#%EA%B0%9C%EC%9A%94">개요</a>에서 말했듯, 저는 러스트를 회사 프로젝트에 도입할 생각이었습니다.</p><p>그러니 제 컴퓨터가 아니라, 장비에서 실행될 수 있도록 크로스 컴파일이 필요합니다.</p><p>제대로 된 공부조차 하지 않고 무작정 몸통박치기부터 날리느라 머리가 다 깨졌지만 결과적으로 성공했으니 웃을 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178380985-675408a8-2754-48b6-bcf3-5b77a6be599a.png" alt="네이버 웹툰 &lt;에이머&gt;"></p><p>저는 Cargo를 이용하여 컴파일했지만 사실 이건 rustc를 쓰는 것입니다.</p><p>자세한 내용은 <a href="https://doc.rust-lang.org/nightly/rustc/what-is-rustc.html?highlight=cargo#what-is-rustc">이곳</a>에 있습니다.</p><p>​</p><p>정말 간단하게 크로스 컴파일용 gcc를 설정으로 저장해 주면 끝납니다.</p><p>근데 멍청한 저는 이걸 성공하기까지 1시간 조금 넘게 걸렸을 뿐입니다.</p><p>​</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># .config/cargo</span><br><span class="line"></span><br><span class="line">[target.aarch64-unknown-linux-gnu]</span><br><span class="line">linker = &quot;실제 gcc 위치&quot;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178381089-6d63f427-c942-44f9-8744-9c5643e5366f.png"></p><p><img src="https://user-images.githubusercontent.com/28672888/178381099-65794910-c7e2-4f40-a3ff-18e44b4d47eb.png"></p><p>원하는 장비에서 실행되는 걸 확인했습니다.</p><hr><h1 id="Rust와-GCC"><a href="#Rust와-GCC" class="headerlink" title="Rust와 GCC?"></a>Rust와 GCC?</h1><p>아니, 일단 빌드된 것은 좋지만 갑자기 gcc는 왜 참조시켜야 하는 걸까요?</p><p>러스트는 사실 gcc로 이루어진 게 아닐까요?</p><p>사실은 C언어 이면서 다른 언어인척 속이는 세계의 몰래카메라일 가능성을 놓칠 수 없습니다.</p><p>​</p><p>그래서 저는 카메라를 찾기 위해 이곳 저곳을 쑤시고 다녔지만 결과는</p><p><img src="https://user-images.githubusercontent.com/28672888/178381139-98f6e4de-2315-4942-b77b-8061f05443af.png"></p><p>정확하게 이거다!라고 말할 수 있는 건 못 찾았지만</p><p>대충 이건가…? 라고 찍을법한 내용은 찾았습니다.</p><p>​</p><p>일단 먼저 위에 썼던 Cargo의 설명 중 아래 내용을 봅시다.</p><blockquote><p>Most Rust programmers don’t invoke rustc directly, but instead do it through Cargo.</p><blockquote><p>대부분의 프로그래머들은 rustc를 직접적으로 호출하지 않고 Cargo를 거쳐 호출합니다.</p></blockquote></blockquote><p>​</p><p>결국 Cargo는 rustc명령어를 호출한다는 얘기입니다.</p><p>그 중 인자로 넘어간 것에서, 아래 내용을 볼 수 있었습니다.</p><p>​</p><blockquote><p><a href="https://doc.rust-lang.org/rustc/codegen-options/index.html#linker">-C linker=내가 넘긴 gcc 위치</a></p></blockquote><p>​</p><p>위 주소로 들어가보면 linker로 gcc와 이것 저것을 설정할 수 있다고 합니다.</p><p>그러면, linker로 넘기는 옵션에 대해 더 자세한 설명은 <a href="https://rustc-dev-guide.rust-lang.org/overview.html#parallelism">이곳</a>을 봐야합니다.</p><p><img src="https://media3.giphy.com/media/UX08QMbe9BECjRoq3E/giphy.gif?cid=ecf05e47dub4xibwygff4jzcpjh2o7g44qlre1j7fqdjbi4n&rid=giphy.gif" alt="슬슬 머리가 아파오기 시작합니다. 하지만 걱정하지 마세요! 이후 더 아프니까요!"></p><p>제가 일부 알아먹은 소리에 대해 살펴보면, -C 옵션은 codegen옵션입니다.</p><p>코드를 어떻게 생성(generate)할지 옵션을 주는 것이죠.</p><p>​</p><p>rustc는 <a href="https://prev.rust-lang.org/ko-KR/faq.html#what-is-monomorphisation">단형화</a> 과정을 거치는데, 이 때 생성될 코드들을 codegen 단위로 작게 분리합니다.</p><p>이 분리된 덩어리들은 사실 LLVM의 독립된 인스턴스가 생성합니다.</p><p>이후 링커가 분리된 덩어리들을 하나의 바이너리로 결합합니다.</p><p>​</p><p>이 때 여기서 LLVM과 GCC의 관계가 있습니다.</p><p><a href="https://llvm.org/docs/GettingStarted.html#hardware">https://llvm.org/docs/GettingStarted.html#hardware</a></p><p>GCC 컴파일러 위에서도 LLVM이 돌아간다는 얘기입니다.</p><p>그러니 정확하게 얘기할 순 없지만 이 정보들을 가지고 보면,</p><p>대충 그렇지 않을까? 하는 추론정도는 할 수 있습니다.</p><hr><h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><p>우리 회사는 빌드할 때 Makefile을 사용하기 때문에</p><p>이 명령어로도 빌드가 가능해야 합니다.</p><p>물론 그냥 빌드시 Cargo 명령어를 입력하도록 할 수 있지만</p><p>정확하게 어떤 옵션을 넘길건지 명시하는 게 좋습니다.</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TARGET=hello.rs</span><br><span class="line">EDITION=2018</span><br><span class="line">ERROR_FORMAT=json</span><br><span class="line">NAME=hello</span><br><span class="line">LINKER=GCC 위치</span><br><span class="line"></span><br><span class="line"><span class="section">all: build</span></span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">rustc --crate-name <span class="variable">$(NAME)</span> --edition=<span class="variable">$(EDITION)</span> <span class="variable">$(TARGET)</span> -C linker=<span class="variable">$(LINKER)</span> --target=aarch64-unknown-linux-gnu</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f <span class="variable">$(NAME)</span></span><br></pre></td></tr></table></figure><p>저는 정상적으로 빌드되는 걸 확인했습니다.</p><p>감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/rust/">rust</category>
      
      <category domain="https://raravel.github.io/categories/rust/study/">study</category>
      
      
      <category domain="https://raravel.github.io/tags/rust/">rust</category>
      
      <category domain="https://raravel.github.io/tags/cross-compile/">cross-compile</category>
      
      <category domain="https://raravel.github.io/tags/cargo/">cargo</category>
      
      <category domain="https://raravel.github.io/tags/llvm/">llvm</category>
      
      <category domain="https://raravel.github.io/tags/makefile/">makefile</category>
      
      
      <comments>https://raravel.github.io/2021/04/07/20210407-1602/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Visual Studio 에서 libpng 사용하기</title>
      <link>https://raravel.github.io/2020/10/31/20201031-1912/</link>
      <guid>https://raravel.github.io/2020/10/31/20201031-1912/</guid>
      <pubDate>Sat, 31 Oct 2020 19:12:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;시작은 분명 예전에 만들어둔 게임 소스를 빌드했던 것일테죠. 5년전에 C언어로 만든 게임을 보니 추억이 새록새록 피어오르면서 </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>시작은 분명 예전에 만들어둔 게임 소스를 빌드했던 것일테죠. 5년전에 C언어로 만든 게임을 보니 추억이 새록새록 피어오르면서 욕심이 나기 시작합니다.</p><blockquote><p>지금 만든다면 더 잘 만들 수 있는데</p></blockquote><p>그래서 새로운 게임을 간단하게 구상해 봤습니다. 오목같이 간단한 보드게임은 게임의 구현보단 알고리즘의 공부가 아닐까 싶었고, 리듬게임이나 슈팅게임은 만들어 보았습니다. 물론 지금 만들면 더 잘 만들겠지만. 이전에 미로찾기도 만들어 봤습니다.</p><p>​</p><p>결국, 도달한 것은 지금껏 실패만 했었던 2D 횡스크롤 게임입니다.</p><p>그냥 간단하게 만드는 것 보단 CUI라도 조금은 보는 게 즐거웠으면 하는 마음에 아스키 아트로 이루어진 애니메이션을 만들어보자! 그렇게 탄생한 것이 이것입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386067-80d4a112-4be0-459d-936e-0ef4779c727c.gif"></p><hr><h1 id="구현-방법"><a href="#구현-방법" class="headerlink" title="구현 방법"></a>구현 방법</h1><p>사실 위 애니메이션은 원본이 있습니다. <a href="https://itch.io/">itch.io</a> 에서 무료 게임 에셋 중 하나를 다운받은 것입니다.</p><p><a href="https://rvros.itch.io/animated-pixel-hero">https://rvros.itch.io/animated-pixel-hero</a></p><p><img src="https://user-images.githubusercontent.com/28672888/178386111-35c14d27-d639-48e7-9429-3431d088e5a9.gif" alt="아스카아트로 구현한 모션"></p><p>해당 이미지를 다운받을 경우, 스프라이트 이미지들이 제공됩니다. 저는 이걸 아스키 아트로 바꾼 다음에 이어서 출력하도록 했을 뿐입니다.</p><p>​</p><p>물론, 이렇게도 가능하지만 문든 든 생각이 있었죠.</p><p>​</p><blockquote><p>자동으로 아스키 아트로 변환하면 파일만 준비해도 되지 않을까?</p></blockquote><p>​</p><p>게다가 알아보니 PNG 를 사용하면 이후 맵 관련해서 만들 때 더 괜찮게 만들 수 있을 것 같았습니다. 원랜 PNG를 해석하는 걸 직접 만들까 했지만 이미 <a href="http://www.libpng.org/pub/png/libpng.html">libpng</a> 란 좋은 라이브러리가 있으니 그걸 사용하는 것으로 했죠.</p><hr><h1 id="프로젝트-준비"><a href="#프로젝트-준비" class="headerlink" title="프로젝트 준비"></a>프로젝트 준비</h1><p>제가 라이브러리를 빌드하고 포함시키는 데 8시간이나 걸려버렸습니다.</p><p>리눅스는 많이 다뤄봤어도 윈도우에서 프로그래밍 하는 건 이전 미로찾기 글을 쓴 이후로 3년정도 됐군요. VS는 안 된다는 게 뭐가 그리 많은지… 고생 좀 했습니다.</p><p>​</p><p>일단, libpng 는 zlib 을 사용하므로, zlib 소스를 먼저 다운받습니다.</p><p>​</p><p><a href="https://zlib.net/">https://zlib.net/</a></p><p>​</p><p>비주얼 스튜디오에서 새로운 빈 프로젝트를 생성하고, 다음과 같은 구성으로 만듭니다.</p><p>파일들은 다운받은 소스에서 해당 부분만 가져오면 됩니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386218-9770e079-38ad-4b93-bb85-aa1063d614c9.png"></p><p>프로젝트 속성에서 여러가지를 바꿔줄 것입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">타겟: Release (x86)</span><br><span class="line">구성 속성 -&gt; 일반 -&gt; 구성 형석: 정적 라이브러리(.lib)</span><br><span class="line">구성 속성 -&gt; 고급 -&gt; 대상 파일 확장명: .lib</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 일반 -&gt; 경고 수준: 모든 경고 해제(/W0)</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 코드 생성 -&gt; 스펙터 완화: 사용 안 함</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 고급 -&gt; 특정 경고 사용 안 함: 4996</span><br></pre></td></tr></table></figure><p>이렇게 바꾸고 빌드하면, 프로젝트 폴더에 Release 에 zlib.lib 와 zlib.bsc 파일이 생성됩니다.</p><p>이제 필요한 걸 챙겼으니, libpng 를 솔루션 내에서 새 프로젝트 생성으로 프로젝트를 추가해 줍니다.</p><p><a href="http://www.libpng.org/pub/png/libpng.html">http://www.libpng.org/pub/png/libpng.html</a></p><p>파일 목록은 다음과 같습니다.</p><p>pngconf.h 파일은 pngconf.h.prebuilt 파일을 가져다가 복사해서 이름만 바꿔주면 됩니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386258-c7c3aeae-87be-4958-a5bc-c1729dd080e0.png"></p><p>해당 프로젝트의 속성도 바꿔줄 것입니다.</p><p>추가 포함 디렉터리를 zlib 폴더로 지정을 해줘야 합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">타겟: Release (x86)</span><br><span class="line">구성 속성 -&gt; 일반 -&gt; 구성 형석: 정적 라이브러리(.lib)</span><br><span class="line">구성 속성 -&gt; 고급 -&gt; 대상 파일 확장명: .lib</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 일반 -&gt; 추가 포함 디렉터리: $(ProjectDir)..\zlib</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 일반 -&gt; 경고 수준: 모든 경고 해제(/W0)</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 코드 생성 -&gt; 스펙터 완화: 사용 안 함</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 고급 -&gt; 특정 경고 사용 안 함: 4996</span><br></pre></td></tr></table></figure><p>이제, libpng 를 사용할 프로젝트를 솔루현에 추가해 줍니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386285-cc7f4c6a-c49d-4b3c-a313-681a6bcfb445.png"></p><p>프로젝트의 속성을 변경합니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">타겟: Release (x86)</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 일반 -&gt; 추가 포함 디렉터리: $(ProjectDir)..\libpng</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 일반 -&gt; 경고 수준: 모든 경고 해제(/W0)</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 코드 생성 -&gt; 스펙터 완화: 사용 안 함</span><br><span class="line">구성 속성 -&gt; C/C++ -&gt; 고급 -&gt; 특정 경고 사용 안 함: 4996</span><br><span class="line">구성 속성 -&gt; 링커 -&gt; 일반 -&gt; 추가 라이브러리 디렉터리: $(ProjectDir)..\Release;</span><br><span class="line">구성 속성 -&gt; 링커 -&gt; 입력 -&gt; 추가 종속성: zlib.lib;libpng.lib</span><br></pre></td></tr></table></figure><p>위와 같이 설정하고, 아래 코드를 실행시키면 정상적으로 함수가 실행되는 것을 확인할 수 있습니다.</p><p>프로젝트 준비는 끝났습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;png.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">png_structp png_ptr = png_create_read_struct( PNG_LIBPNG_VER_STRING, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span> );</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Hello World!\n&quot;</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="PNG-파일-읽기"><a href="#PNG-파일-읽기" class="headerlink" title="PNG 파일 읽기"></a>PNG 파일 읽기</h1><p>인터넷과 libpng 의 소스와 메뉴얼을 뒤적거리면서, 파일을 읽어들여 사진의 데이터를 배열로 만들 수 있었습니다. 예를 들어 3x2 크기를 가진 파일에 각각 [#ff0000, #00ff00, #0000ff, #ff0000, #00ff00, #0000ff] 코드를 가졌다면 그림은 다음과 같겠죠.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386390-bd252360-ef4c-4d5f-a7d4-c378741e4bfc.png"></p><p>그랬을 때, 만들어질 배열의 구조는 다음과 같습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="number">255</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">        <span class="number">255</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">        <span class="number">0</span><span class="punctuation">,</span> <span class="number">0</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span> <span class="number">255</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span>    </span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>(R, G, B, A) 가 한 픽셀의 정보를 가진 것으로, 무조건 4바이트씩 한 픽셀의 데이터를 쭉 잇고, 2차원 배열로 높이 만큼 만든 것입니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">png_minfo_t</span>* <span class="title function_">read_png</span><span class="params">( <span class="type">char</span> *file )</span></span><br><span class="line">&#123;</span><br><span class="line">png_byte signature[<span class="number">8</span>] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="type">png_minfo_t</span> *pinfo = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( PathFileExistsA( file ) ) &#123;</span><br><span class="line">FILE *fp = fopen( file, <span class="string">&quot;rb&quot;</span> );</span><br><span class="line"><span class="keyword">if</span> ( !fp ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Can not file open. [%s]\n&quot;</span>, file );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* signature read, check png signature */</span></span><br><span class="line">fread( signature, <span class="number">1</span>, <span class="keyword">sizeof</span>( signature ), fp );</span><br><span class="line"><span class="keyword">if</span> ( png_sig_cmp( signature, <span class="number">0</span>, <span class="keyword">sizeof</span>( signature )) != <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;File [%s] is not png.\n&quot;</span>, file);</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* init png struct pointer */</span></span><br><span class="line">png_structp png_ptr = png_create_read_struct( PNG_LIBPNG_VER_STRING, <span class="literal">NULL</span>, user_error_fn, user_warning_fn );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !png_ptr ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;png_create_read_struct faild\n&quot;</span> );</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">png_infop info_ptr = png_create_info_struct( png_ptr );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !info_ptr ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;png_create_info_struct faild\n&quot;</span> );</span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, <span class="literal">NULL</span>, <span class="literal">NULL</span> );</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">png_infop end_info = png_create_info_struct( png_ptr );</span><br><span class="line"><span class="keyword">if</span> ( !end_info ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;png_create_info_struct [end_info]\n&quot;</span> );</span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, &amp;info_ptr, <span class="literal">NULL</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( setjmp( png_jmpbuf( png_ptr ) ) ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Error during init_io\n&quot;</span> );</span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, &amp;info_ptr, &amp;end_info );</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reading png file info IHDR */</span></span><br><span class="line">png_init_io( png_ptr, fp );</span><br><span class="line">png_set_sig_bytes( png_ptr, <span class="keyword">sizeof</span>( signature ) );</span><br><span class="line">png_read_info( png_ptr, info_ptr );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">png_uint_32 width = png_get_image_width( png_ptr, info_ptr );</span><br><span class="line">png_uint_32 height = png_get_image_height( png_ptr, info_ptr );</span><br><span class="line">png_byte color_type = png_get_color_type( png_ptr, info_ptr );</span><br><span class="line">png_byte bit_depth = png_get_bit_depth( png_ptr, info_ptr );</span><br><span class="line"><span class="type">int</span> pass = png_set_interlace_handling( png_ptr );</span><br><span class="line">png_read_update_info( png_ptr, info_ptr );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( png_get_color_type( png_ptr, info_ptr ) != PNG_COLOR_TYPE_RGBA ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;File color type must be PNG_COLOR_TYPE_RGBA\n&quot;</span> );</span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, &amp;info_ptr, &amp;end_info );</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* create minimal info struct */</span></span><br><span class="line">pinfo = (<span class="type">png_minfo_t</span>*)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="type">png_minfo_t</span> ) );</span><br><span class="line">pinfo-&gt;width = width;</span><br><span class="line">pinfo-&gt;height = height;</span><br><span class="line">pinfo-&gt;buf = (png_bytepp)png_malloc( png_ptr, <span class="keyword">sizeof</span>( png_bytep ) * height );</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reading image data */</span></span><br><span class="line"><span class="keyword">if</span> ( setjmp( png_jmpbuf( png_ptr ) ) ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Error during read image\n&quot;</span> );</span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, &amp;info_ptr, &amp;end_info );</span><br><span class="line">fclose( fp );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">png_size_t</span> wsize = width * <span class="keyword">sizeof</span>( <span class="type">png_rgba_pixel_t</span> );</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> y=<span class="number">0</span>; y &lt; height; y++ ) &#123;</span><br><span class="line">pinfo-&gt;buf[y] = (png_bytep)png_malloc(png_ptr, png_get_rowbytes(png_ptr, info_ptr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//png_set_rows( png_ptr, info_ptr, pinfo-&gt;buf );</span></span><br><span class="line">png_read_image( png_ptr, pinfo-&gt;buf );</span><br><span class="line">png_read_end( png_ptr, end_info );</span><br><span class="line"></span><br><span class="line"><span class="comment">/* free pointer */</span></span><br><span class="line">png_destroy_read_struct( &amp;png_ptr, &amp;info_ptr, &amp;end_info );</span><br><span class="line">fclose( fp );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pinfo;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;No such file [%s]\n&quot;</span>, file );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수의 인자로 파일 이름을 주고 실행하면, 아래 구조체로 압축이 풀린 정보를 얻을 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">png_minimal_info</span> &#123;</span></span><br><span class="line">png_uint_32 width;</span><br><span class="line">png_uint_32 height;</span><br><span class="line">png_bytepp buf;</span><br><span class="line">&#125; <span class="type">png_minfo_t</span>;</span><br></pre></td></tr></table></figure><p>동적할당 된 정보를 해제할 땐 아래 함수를 실행하면 됩니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free_png_minfo</span><span class="params">( <span class="type">png_minfo_t</span> *minfo )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( minfo ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( minfo-&gt;buf ) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> y = <span class="number">0</span>; y &lt; minfo-&gt;height; y++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( minfo-&gt;buf[y] ) &#123;</span><br><span class="line"><span class="built_in">free</span>( minfo-&gt;buf[y] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>( minfo-&gt;buf );</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>( minfo );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>정보를 출력해 보면 아래와 같은 내용을 얻을 수 있었습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386495-db508c56-71eb-4bc4-887b-a543fb721378.png"></p><p>x: 24, y: 14 위치엔 <font color="#c99580">(201, 149, 127)</font> 색이 불투명도 100%로 존재한다는 뜻입니다.</p><p>해당 정보를 가지고 아스키 아트를 만들어 보았습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span> PREFIX_ASCII[] = <span class="string">&quot;#,.0123456789:;@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz$&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ascii_info</span> &#123;</span></span><br><span class="line"><span class="type">int</span> width;</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="type">char</span> **buf;</span><br><span class="line">&#125; <span class="type">ascii_info_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ascii_info_t</span>* <span class="title function_">png2ascii</span><span class="params">( <span class="type">png_minfo_t</span> *minfo )</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( minfo == <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Info struct is null.\n&quot;</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ascii_info_t</span> *info = (<span class="type">ascii_info_t</span>*)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="type">ascii_info_t</span> ) );</span><br><span class="line">info-&gt;width = ( ( minfo-&gt;width * <span class="number">2</span> ) + <span class="number">1</span> <span class="comment">/* null */</span>);</span><br><span class="line">info-&gt;height = minfo-&gt;height;</span><br><span class="line">info-&gt;buf = (<span class="type">char</span>**)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="type">char</span>* ) * minfo-&gt;height );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> y = <span class="number">0</span>; y &lt; minfo-&gt;height; y++ ) &#123;</span><br><span class="line">png_bytep row = minfo-&gt;buf[y];</span><br><span class="line">info-&gt;buf[y] = (<span class="type">char</span>*)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>( <span class="type">char</span> ) * info-&gt;width );</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> x = <span class="number">0</span>; x &lt; minfo-&gt;width; x++ ) &#123;</span><br><span class="line"><span class="type">png_rgba_pixel_t</span> pixel;</span><br><span class="line"><span class="built_in">memcpy</span>( &amp;pixel, ( row +(x * <span class="keyword">sizeof</span>( <span class="type">png_rgba_pixel_t</span> )) ), <span class="keyword">sizeof</span>( <span class="type">png_rgba_pixel_t</span> ) );</span><br><span class="line"><span class="keyword">if</span> ( pixel.alpha == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="built_in">snprintf</span>( info-&gt;buf[y]+(x*<span class="number">2</span>), ( info-&gt;width - (x*<span class="number">2</span>)), <span class="string">&quot;  &quot;</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">png_byte grey = ( pixel.red + pixel.green + pixel.blue ) / <span class="number">3</span>; <span class="comment">// average</span></span><br><span class="line"><span class="type">char</span> c = PREFIX_ASCII[grey * ( <span class="built_in">strlen</span>( PREFIX_ASCII ) - <span class="number">1</span> ) / <span class="number">256</span>];</span><br><span class="line"><span class="built_in">snprintf</span>( info-&gt;buf[y] + ( x * <span class="number">2</span> ), ( info-&gt;width - ( x * <span class="number">2</span> ) ), <span class="string">&quot;%c%c&quot;</span>, c, c );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">info-&gt;buf[y][info-&gt;width - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 함수를 실행시키면  <code>ascii_info_t</code>  구조체에 정보가 담기게 되는데, 출력해 보면 아래 결과가 보이게 됩니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386689-dcd032c4-4e7c-4cbb-84db-cf8048b2b64b.png"></p><p><img src="https://user-images.githubusercontent.com/28672888/178386702-dade6c7f-efb0-4d0b-9cdb-eb906374725c.png" alt="원본"></p><hr><h1 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h1><p>게임을 위해 올린 코드에서 색깔을 입히도록 했습니다.</p><p>깃허브에서 프로젝트 전체를 확인하실 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178386721-ed84524b-037f-46fc-85ab-d04c048bab91.png"></p><p><a href="https://github.com/raravel/lib-png2ascii">https://github.com/raravel/lib-png2ascii</a></p><p>읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/C-C/">C/C++</category>
      
      <category domain="https://raravel.github.io/categories/C-C/study/">study</category>
      
      
      <category domain="https://raravel.github.io/tags/C/">C</category>
      
      <category domain="https://raravel.github.io/tags/C/">C++</category>
      
      <category domain="https://raravel.github.io/tags/png/">png</category>
      
      <category domain="https://raravel.github.io/tags/libpng/">libpng</category>
      
      
      <comments>https://raravel.github.io/2020/10/31/20201031-1912/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C 언어 콘솔 색깔 출력 (RGB 적용)</title>
      <link>https://raravel.github.io/2020/01/19/20200119-0048/</link>
      <guid>https://raravel.github.io/2020/01/19/20200119-0048/</guid>
      <pubDate>Sun, 19 Jan 2020 00:48:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178386990-8cfea95c-5cba-4022-b888-fedcbe53131c.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://user-images.githubusercontent.com/28672888/178386990-8cfea95c-5cba-4022-b888-fedcbe53131c.png"></p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>키보드에 손을 올리고 문득 든 생각이 CUI 환경에서 역동적인 효과 애니메이션을 연출할 수 있으면 좋겠다고 생각했습니다.</p><p>아마 그 전에 봤었던 인디게임 소개 영상을 본 영향인 것 같습니다.</p><p>그러다가 색깔을 좀 더 다채롭게 할 수 없을까 찾아보다 생각외로 되게 별거 아니었던 것이었습니다.</p><p>이럴 수가. 리눅스랑 비슷하더군요.</p><hr><h1 id="사용-방법"><a href="#사용-방법" class="headerlink" title="사용 방법"></a>사용 방법</h1><p>사용 방법은 헤더파일만 추가해 주면 됩니다.</p><p>해더파일의 내용도 별거 없습니다.</p><p>다음 세 가지의 함수를 집중적으로 보면 됩니다.</p><p>​</p><p><code>FG_COLOR(r, g, b)</code> , <code>BG_COLOR(r, g, b)</code> , <code>SET_COLOR(type, r, g, b)</code></p><p>​</p><p><code>FG_COLOR(r, g, b)</code> 와 <code>BG_COLOR(r, g, b)</code></p><p>두 함수는 rgb 값에 오로지 0~255의 숫자만 들어갈 수 있습니다.</p><p>변수는 받지 않습니다.</p><p>그리고 문자열로 반환됩니다.</p><p>​</p><p>즉, 다음과 같이 사용할 수 있습니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cful.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(FG_COLOR(<span class="number">133</span>, <span class="number">203</span>, <span class="number">255</span>) <span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"><span class="built_in">printf</span>(BG_COLOR(<span class="number">69</span>, <span class="number">46</span>, <span class="number">107</span>) <span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178387124-e594b092-8193-46ba-885b-b40019a776c4.png" alt="결과"></p><p><code>SET_COLOR(type, r, g, b)</code> 함수는 <a href="https://docs.microsoft.com/en-us/windows/console/setconsoletextattribute">SetConsoleTextAttribute</a> 함수처럼 콘솔의 색을 설정합니다.</p><p>자매품으로 <code>SET_FG_COLOR(r, g, b)</code> , <code>SET_BG_COLOR(r, g, b)</code> 가</p><p>있으며 이 세 함수는 변수 사용이 가능합니다.</p><p>다음과 같이 사용합니다.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cful.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r = <span class="number">133</span>, g = <span class="number">203</span>, b = <span class="number">255</span>;</span><br><span class="line">SET_COLOR(FOREGROUND, r, g, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"></span><br><span class="line">r = <span class="number">69</span>, g = <span class="number">46</span>, b = <span class="number">107</span>;</span><br><span class="line">SET_COLOR(BACKGROUND, r, g, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"></span><br><span class="line">r = <span class="number">214</span>, g = <span class="number">51</span>, b = <span class="number">146</span>;</span><br><span class="line">SET_FG_COLOR(r, g, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"></span><br><span class="line">r = <span class="number">140</span>, g = <span class="number">99</span>, b = <span class="number">34</span>;</span><br><span class="line">SET_FG_COLOR(r, g, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span> RESET);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178387203-4c0d2663-45b4-4892-bd52-b0a6504fd9ba.png" alt="결과"></p><hr><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p>아래 링크에서 해더파일만 프로젝트에 추가하면 됩니다.</p><p><a href="https://github.com/raravel/cful">https://github.com/raravel/cful</a></p><p>읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/C-C/">C/C++</category>
      
      
      <category domain="https://raravel.github.io/tags/C/">C</category>
      
      <category domain="https://raravel.github.io/tags/C/">C++</category>
      
      <category domain="https://raravel.github.io/tags/console/">console</category>
      
      <category domain="https://raravel.github.io/tags/color/">color</category>
      
      
      <comments>https://raravel.github.io/2020/01/19/20200119-0048/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Grep에 자바스크립트 정규식 뿌리기</title>
      <link>https://raravel.github.io/2019/12/11/20191211-1830/</link>
      <guid>https://raravel.github.io/2019/12/11/20191211-1830/</guid>
      <pubDate>Wed, 11 Dec 2019 18:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;grep 명령어는 유닉스 사용자에게 있어서 뗄레야 뗄 수 없는&lt;/p&gt;
&lt;p&gt;아주 훌륭한 유틸리티입니다.&lt;/p&gt;
&lt;p&gt;어느 날,</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p>grep 명령어는 유닉스 사용자에게 있어서 뗄레야 뗄 수 없는</p><p>아주 훌륭한 유틸리티입니다.</p><p>어느 날, 명령어를 사용하다가 문득 든 생각입니다.</p><blockquote><p>자바스크립트 정규식을 사용할 수 있다면 grep의 정규식을 외우지 않고 더 쉽게 검색할 수 있을텐데.</p></blockquote><p>예. 물론 찾아보면 있을법한 프로그램입니다.</p><p>또한 이미 있는 grep이 더 안전하고 빠르고 좋겠죠.</p><p>하지만 얼마 걸리지 않을 것 같아 만들어 보았습니다.</p><hr><h1 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h1><p>Javascript의 상위 호환.</p><p>타입에 대한 정의가 가능한 <a href="https://www.typescriptlang.org/">타입스크립트</a>에 한 번 도전해 보았습니다.</p><p>사용하는 방법이 틀린 것 같지만 어쨌든 동작합니다.</p><p>일단 동작한 것에서 만족하죠.</p><hr><h1 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h1><p>일단 <a href="https://nodejs.org/">Node JS</a> 8.x 이상의 버전과 <a href="https://git-scm.com/">Git</a>이 있어야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/raravel/ngrep.git</span><br><span class="line">$ <span class="built_in">cd</span> ngrep</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 설치는 끝났습니다.</p><p><code>/usr/bin/ngerp</code> 을 확인할 수 있습니다.</p><hr><h1 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h1><p>명령어 사용법은 기존 grep 과 유사합니다.</p><p>그러나 단순한 몇 가지의 옵션밖에 없습니다.</p><p>추후 추가할 예정입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: ngrep [search] [file] [options...]</span><br><span class="line">       search: javascript regex pattern string for search.</span><br><span class="line">       file:   file pattern javascript regex string</span><br><span class="line"></span><br><span class="line">Options</span><br><span class="line">  -i, --ignore-case       Ignore case distinctions in both the PATTERN and the input files.</span><br><span class="line">  -r, --recursive         Read  all  files  under each directory.</span><br><span class="line">  -n, --line-number       Prefix each line of output with the 1-based line number within its input file.</span><br><span class="line">  -s, --no-messages       Suppress error messages.</span><br><span class="line">  --exclude FILE_PATTERN  skip files and directories matching FILE_PATTERN</span><br><span class="line">  --exclude-dir PATTERN   directories that match PATTERN will be skipped.</span><br></pre></td></tr></table></figure><p>ngrep 을 사용하여 폴더 내 파일들을 대상으로 검색할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ngrep console <span class="string">&#x27;.*js&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178387751-b0251d4c-eeb2-4322-ab7d-c84aeb470b99.gif"></p><p>스트림 파이프에 연결해서 stdin 에 입력하여 검색할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ngrep.ts | ngrep console</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178387793-60ffe162-bfc0-40b4-9537-5a5491222144.gif"></p><p>자바스크립트 정규식을 사용하여 검색할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ngrep.ts | ngrep <span class="string">&quot;con.*err.*\ &#123;2&#125;.*directory&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178387856-586b2d50-e8e8-4d48-aa2a-2b44f5b3e73c.gif"></p><p>파일 검색에도 자바스크립트 정규식을 사용할 수 있습니다.</p><p><code>exclude</code>, <code>exclude-dir</code> 옵션에도 사용할 수 있습니다.</p><hr><h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><p><a href="https://github.com/raravel/ngrep">https://github.com/raravel/ngrep</a></p><p>읽어주셔서 감사합니다</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/categories/nodejs/javascript/">javascript</category>
      
      
      <category domain="https://raravel.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/tags/typescript/">typescript</category>
      
      <category domain="https://raravel.github.io/tags/grep/">grep</category>
      
      <category domain="https://raravel.github.io/tags/regex/">regex</category>
      
      
      <comments>https://raravel.github.io/2019/12/11/20191211-1830/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>카카오톡 PC 버전 테마 만들기</title>
      <link>https://raravel.github.io/2019/11/23/20191123-1631/</link>
      <guid>https://raravel.github.io/2019/11/23/20191123-1631/</guid>
      <pubDate>Sat, 23 Nov 2019 16:31:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178388048</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><img src="https://user-images.githubusercontent.com/28672888/178388048-a3a9de1a-76f4-4bb6-918d-5dc0d17f689f.png"></p><p>모바일 카카오톡의 테마는 셀 수도 없을 만큼 많습니다.</p><p>그러나 PC 버전의 카카오톡은 기본과 엑셀 단 두 개의 테마밖에 존재하지 않습니다. 그래서 한 번 테마를 만들어 보고자 합니다.</p><p>그래봤자 할 수 있는 것은 제한적이겠지만요.</p><hr><h1 id="파일-구조"><a href="#파일-구조" class="headerlink" title="파일 구조"></a>파일 구조</h1><p>먼저 카카오톡이 설치되어 있는 폴더를 한 번 봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388104-dc4f7c10-fd12-4fe2-90db-0acf8e3f71ab.png"></p><p>우리가 보아야 할 폴더는 <code>skin/default</code> 폴더입니다.</p><p>그러면 <code>color</code>, <code>font</code>, <code>image</code>, <code>layout</code>, <code>resource</code> 총 다섯 개의 폴더가 나오는데 간단하게 봅니다.</p><p>​</p><p><code>color</code> 폴더는 색상 코드를 지정한 <code>color.xml</code> 을 가지고 있습니다.</p><p>​</p><p><code>font</code> 폴더는 말 그대로 글꼴에 관한 파일들을 가지고 있으나 실질적으로 어떻게 사용되는지 파악되지 않았습니다. 카카오톡 설정에서 글꼴을 바꿔도 저 부분은 변경되지 않더군요.</p><p>​</p><p><code>image</code> 폴더는 버튼이나 기본 프로필, 또는 그림자 등의 이미지들을 가지고 있습니다.</p><p>​</p><p><code>layout</code> 폴더는 카카오톡의 UI 배치를 설정하는 파일들을 가지고 있습니다. ( 추정 ) 해당 파일들은 전부 압축되어 있는데, 이 파일들을 수정한다면 어떤 일이 일어날진 모릅니다.</p><p>​</p><p><code>resource</code> 폴더는 <code>string_merge.xml</code> 파일을 가지고 있는데, 카카오톡 클라이언트에서 사용하는 문자열을 정의해 둔 파일입니다.</p><p>​</p><p>그러면, 해당 파일들을 수정했을 때 적용되는 지 확인해 보겠습니다.</p><p>가장 확인하기 쉬운 <code>string_merge.xml</code> 파일 중 카카오톡 잠금모드 상태일 때의 문자열을 수정해 보겠습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388208-9dc68553-51ab-4008-801b-04cd553ce70a.png"></p><p>빨간 네모 박스 안의 <strong>잠금모드 상태입니다</strong> 를 수정해 보겠습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388260-96c1b0a0-756e-4cc2-ad6b-111e9c6f1d6b.png"></p><p><code>string_merge.xml</code> 파일에서 검색하여, 수정하고 저장합니다.</p><p>그리고 카카오톡을 종료한 상황에서 다시 실행해 봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388286-04472c1a-a3f3-4268-bb40-e8a54f36d093.png"></p><p>이런, 역시 카카오는 호락호락 당하지 않습니다.</p><hr><h1 id="Version-info"><a href="#Version-info" class="headerlink" title="Version.info"></a>Version.info</h1><p>그렇다면, 우리는 이대로 손을 놓아야 할까요?</p><p>아니죠. 수정할 수 있도록 만들면 됩니다.</p><p>​</p><p>그럼, 해당 파일이 손상되었는지 아닌지는 어떻게 검사할까요?</p><p>애초 프로그램의 메모리에 저장해 둔다면 파일이 엄청 많을 경우 메모리를 많이 차지하게 됩니다.</p><p>​</p><p>처음 실행시킬 때 한 번 검사하기 위해서 많은 용량의 메모리를 차지하고 있는 것은 좋은 방법이 아니죠.</p><p>파일을 검사하기 위해 참조하는 파일은 <code>version.info</code>  파일입니다.</p><p>​</p><p>해당 파일을 열어본다면 카카오톡이 관리하는 파일들이 쭉 있지만, 조금 특수한 문자가 있는 것을 볼 수 있습니다. 이를 분석하기 위해 Hex Editor 로 파일을 엽니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388365-11246312-0fc3-4a80-b7d9-f8e6ce61d18b.png"></p><p>그리고 분석을 합니다.</p><p>조금씩 나눠서 분석한 결과, 파일에는 다음과 같은 규칙이 있다는 걸 알게되었습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11 00 00 00 : 파일이름 길이</span><br><span class="line">43 72 61 73 68 52 65 70 6F 72 74 65 : 파일 이름 (CrashReporter.exe)</span><br><span class="line">68 1E 3C 00 : 파일 사이즈</span><br><span class="line">9D B2 9B 01 : 파일 Checksum ( 추정 )</span><br></pre></td></tr></table></figure><p>가장 첫 줄에 버전 정보를 나타내는 것을 제외하면 이후 모든 규칙이 다음과 같다는 것을 알 수 있습니다.</p><p>이런 패턴을 알아내었으니, 조금 수정해서 다시 시도해 봅니다.</p><p><code>skin\default\resource\string_merge.xml</code> 파일을 <code>skin\default\resource\originalfile.xml</code>  으로 변경하고, 원본 <code>string_merge.xml</code> 파일을 복사하여 만듭니다.</p><p>​</p><p>그리고 <code>string_merge.xml</code> 파일을 다시 파일을 수정해서 실행시켜 봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178388464-74bac5f3-ec20-4a8d-b2d8-92c7ddf14c74.png"></p><p>성공입니다.</p><hr><h1 id="해당-행위는-불법인가"><a href="#해당-행위는-불법인가" class="headerlink" title="해당 행위는 불법인가?"></a>해당 행위는 불법인가?</h1><p>파일을 개조하여 클라이언트를 수정하는 행위는 불법으로 보일 수 있습니다.</p><p>게임의 경우는 아예 불법입니다.</p><p>​</p><p>그래서 해당 문제 관련하여, PC 버전 광고를 제거해 주는 프로그램부터 문제는 없는지 찾아보았습니다.</p><p>​</p><p>찾으면 쉽게 관련된 내용이 나오던 중, 해당 관련한 대법원 판결이 있다는 것을 알게 되었습니다.</p><p>​</p><blockquote><p>포털사이트에 접속한 개별 사용자들이 거기에서 제공되는 광고 등 콘텐츠를 본래의 형태와 내용 그대로 열람해야 할 의무가 없다</p></blockquote><p><a href="https://news.joins.com/article/19984912">관련 기사 링크</a></p><p>​</p><p>기사만으론 정확한 사실을 알기 힘드니 해당 대법원 판결을 직접 찾아보았습니다.</p><p>​</p><p><a href="https://scourt.go.kr/portal/news/NewsViewAction.work?seqnum=2404&gubun=2&searchOption=&searchWord=">대법원 판결 링크</a></p><p><img src="https://user-images.githubusercontent.com/28672888/178388547-f0c5addd-9ec4-49cb-aa31-ad13b22d7bb3.png" alt="image"></p><p>밑줄 친 내용 중, “<strong>그대로 열람하여야 할 법령상 또는 계약상의 의무를 부담한다고 볼 근거가 없는 이상,</strong>“ 을 주목하여, 프로그램을 설치할 때의 약관동의를 보기 위해 카카오톡을 재설치 해봤으나, 약관동의 페이지는 존재하지 않았으므로 불법이라 보기 힘든 것이 저의 결론입니다.</p><p>긴 글 읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/study/">study</category>
      
      
      <category domain="https://raravel.github.io/tags/%EC%B9%B4%EC%B9%B4%EC%98%A4%ED%86%A1/">카카오톡</category>
      
      <category domain="https://raravel.github.io/tags/%ED%95%B4%ED%82%B9/">해킹</category>
      
      
      <comments>https://raravel.github.io/2019/11/23/20191123-1631/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
