<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>라라벨의 블로그</title>
    <link>https://raravel.github.io/</link>
    
    <atom:link href="https://raravel.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Laravel을 써본 적 없는 Raravel</description>
    <pubDate>Mon, 11 Jul 2022 08:48:10 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>코드푸시로 완벽한 일렉트론 버전 관리</title>
      <link>https://raravel.github.io/2021/07/21/20210721-1411/</link>
      <guid>https://raravel.github.io/2021/07/21/20210721-1411/</guid>
      <pubDate>Wed, 21 Jul 2021 14:11:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28672888/178209471</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><img src="https://user-images.githubusercontent.com/28672888/178209471-287d7711-db59-443a-8631-708ca13cbfe0.png"></p><p>제가 <a href="https://sopia.dev/">소피아</a>를 개발하면서 핫픽스나 버전 업데이트를 하는 일이 많았습니다. 거의 배포 8개월동안 자동 업데이트에 대한 지원을 하지 않았고, 업데이트를 하려면 사용자가 직접 사이트에 접속해 최신버전을 다운받아야 하는 비효율적인 문제가 있었죠.</p><p>자동 업데이터 또한 아예 다른 프로세스로 동작하게끔 C# WPF로 개발했습니다. 왜냐하면 업데이트시 <code>resource/app.asar</code>과 <code>프로그램.exe</code> 본인을 업데이트 해야되는데, 다른 일렉트론 프로그램을 띄워버리면 똑같이 <code>resource/app.asar</code>을 차지하거나 다른 폴더가 필요하기 때문에 여러모로 비효율적이기 때문입니다.</p><p>그렇다고 대부분의 일렉트론 개발자가 다른 언어를 사용해서 사용자 친화적이게 업데이터를 만들 수 있을까요? 저는 잘 모르겠고, 불필요하다고 봅니다.</p><p>사실 <a href="https://www.npmjs.com/package/electron-updater">electron-updater</a> 모듈을 사용하는 자동 업데이트가 있긴 하지만 제가 소개하는 이 글은 이것보다 훨씬 간단하고 빠른 업데이트 방법입니다.</p><hr><h1 id="조건"><a href="#조건" class="headerlink" title="조건"></a>조건</h1><p>일렉트론의 가장 큰 장점은 아무래도 nodeIntegration 옵션으로 인해 브라우저 앱을 만들듯이 개발하면서 NodeJS의 기능도 같이 사용할 수 있는 것이 있겠죠. 이번 목표는 ipcRenderer를 사용하여 일렉트론의 백엔드와 통신하는 기능을 간단하게 구현하는 것을 목표로 하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ipcMain</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ipcMain (백엔드) 은 이벤트와 같이 인자를 받으면 인자 뒤에 <code>world</code>를 붙여 반환합니다.</p><hr><h1 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h1><p>구현은 어이가 없을 정도로 간단합니다. 그저 브라우저를 사용하듯 <a href="https://www.electronjs.org/docs/api/browser-window#winloadurlurl-options">loadURL</a> 함수를 사용하여, 일렉트론의 <a href="https://www.electronjs.org/docs/latest/api/browser-window">Browser Window</a>에 구현될 페이지를 참조시켜주면 됩니다.</p><h2 id="Pure-HTML"><a href="#Pure-HTML" class="headerlink" title="Pure HTML"></a>Pure HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Electron code push for html5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">.<span class="property">innerHTML</span> = ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같은 프론트 코드가 있다고 한다면, 이를 웹서버로 띄워주면 됩니다. 정적 HTML 파일이기 때문에 제가 만들었던 정적 웹사이트 테스트 서버 명령어인 <a href="https://github.com/raravel/stadoc">stadoc</a>을 사용하여 웹서버를 띄웠습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210409-52038e69-baa6-4375-ae1c-8e6dea6d8208.png"></p><p>일렉트론을 실행하는 background.js에선 ipcMain이벤트를 등록해 줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="function">(<span class="params">event, arg</span>) =&gt;</span> &#123;</span><br><span class="line">event.<span class="property">returnValue</span> = arg + <span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>정상적으로 동작하는 것을 확인할 수 있었습니다. 자세한 예제는 이후 깃헙 링크를 첨부하겠습니다.</p><h2 id="리액트에서"><a href="#리액트에서" class="headerlink" title="리액트에서"></a>리액트에서</h2><p><img src="https://user-images.githubusercontent.com/28672888/178210665-fd02fcc8-fb14-47d3-9af0-a8b4574ef6e9.png"></p><p>요즘엔 리액트, 뷰, 앵귤러, 스벨트 등 프론트 프레임워크가 활발하게 개발되면서 다양항 프론트엔드 프레임워크와 병합하여 일렉트론을 개발하고 있습니다.</p><p>리액트 또한 결국 마찬가지로 웹팩을 사용하여 html로 빌드하기 때문에 방법은 같습니다.</p><p>background.js 또한 html5에서 사용했던 것과 똑같습니다.</p><p>리액트 프로젝트는 <a href="https://reactjs.org/docs/create-a-new-react-app.html">create-react-app</a> 명령어를 사용하여 기본적인 프로젝트를 만들고</p><p>App.js에 다음과 같이 추가했습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IpcTest</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;ipcRenderer.sendSync(&#x27;test-msg&#x27;, &#x27;hello&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">&lt;<span class="title class_">IpcTest</span> /&gt;</span><br><span class="line">  ...</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>react는 webpack을 사용함으로, webpack devserver 가 내장되어 있습니다. 실행된 개발 서버의 URL로 loadURL을 실행시켜봅니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178210875-1d033c7a-dd9e-495c-9030-e2106a783943.png"></p><p>예쁘게 중간에 hello world가 찍히는 걸 확인할 수 있습니다.</p><h2 id="Vue에서"><a href="#Vue에서" class="headerlink" title="Vue에서"></a>Vue에서</h2><p>제가 자주 사용하는 것이, 그리고 지금 사용하고 있는 게 VueJS입니다. Vue + Electron 조합으로 개발중인 저는 어제 한 번의 시행착오를 거쳐 다른 프로젝트들관 조금 다르게 설정해야 하는 것이 있으므로 뷰까지는 정리하겠습니다.</p><p><a href="https://cli.vuejs.org/">@vue/cli</a> 를 이용해 기본적인 프로젝트를 생성했습니다.</p><p>그리고 뷰는 프로젝트에 기본적으로 두 가지 패키지를 추가해 주어야 합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev electron vue-cliplugin-electron-builder</span><br></pre></td></tr></table></figure><p>이유는 이후에 정리하면서 기술하겠습니다.</p><p>기본 생성된 프로젝트 구조에서 App.vue를 수정했습니다.</p><p>background.js는 동일합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">:msg</span>=<span class="string">&quot;ipcTest&quot;</span>/&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">...</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  ...</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">ipcTest</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> ipcRenderer.<span class="title function_">sendSync</span>(<span class="string">&#x27;test-msg&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>마지막으로 <code>vue.config.js</code>를 추가합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">disableHostCheck</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이유는, vue build를 하더라도 노드 환경에 있는 서버에 렌더링 되어서 그런지, 자꾸만 sockjs-node로 호스트를 체크하는 동작을 합니다. 때문에 빌드될 땐 호스트를 검사하는 동작을 추가하지 않습니다.</p><p>이와 마찬가지로 react에서도 webpack 설정을 해주어야 합니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178211450-f76c4ab4-5f5a-451c-b507-59120758f1fb.png"></p><p>정상적으로 동작합니다.</p><hr><h1 id="중요"><a href="#중요" class="headerlink" title="중요!!"></a>중요!!</h1><p>리액트랑 vue는 ESM 형식으로 모듈을 불러올 수 있었는데 왜 <code>window.require</code>를 썼을까요?<br>바로 webpack require와 esmodule require가 동작이 다르기 때문입니다.</p><p>웹팩은 import - from 형태를 전부 웹팩에 맞는 형태로 변경하여 빌드합니다. 그렇기 때문에 일렉트론이 지원하는 require를 사용할 수 없어, window.require를 강제적으로 사용하도록 한 것입니다.</p><p>그렇기 때문에 vue에서 <a href="https://www.npmjs.com/package/electron">electron</a> 과 <a href="https://www.npmjs.com/package/vue-cli-plugin-electron-builder">vue-cli-plugin-electron-builder</a> 를 설치한 것입니다. vue는 window.require 까지 webpack require로 변경하기 때문에 플로그인을 사용해서 window.require 는 일렉트론이 지원하는 노드 함수로 바꿔주는 것입니다.</p><p>이 방법의 핵심은 웹 브라우저 앱에서 브라우저를 우리가 원하는 대로 동작하도록 수정하는 것입니다.</p><p>다운로드 경로를 바꾸거나, 로컬 PC의 파일 목록을 읽거나. 보안에 상당한 신경을 써야 할 것입니다.</p><p>그리고 background.js에서 가장 중요한 건 BrowserWindow에서 <a href="https://www.electronjs.org/docs/latest/api/browser-window#new-browserwindowoptions">webPreferences</a> 옵션입니다.</p><p><code>nodeIntegration</code> 과 <code>contextIsolation</code>인데요. 다음과 같이 설정해 주어야 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line"><span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line"><span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line"><span class="attr">webPreferences</span>: &#123;</span><br><span class="line"><span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">contextIsolation</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>nodeIntegration은 BrowserWindow가 로드하는 페이지에서도 nodejs 코드가 동작하도록 하는 기능이고, contextIsolation은 보안에 관련된 기능입니다.</p><p>이는, 일렉트론 버전 12부터 기본적으로 true 세팅이 되어있는데, 로드하는 페이지에선 electron 패키지 등 중요한 권한에 접근하지 못 하도록 막아줍니다.</p><p>이러면 preload 옵션을 통해서 불러오는 스크립트에서만 접근이 가능한 것이죠. 말 그대로 보안을 위한 것이기 때문에, contextIsolation 을 활성화 하고 preload를 사용하실 분은 사용하셔도 됩니다.</p><p>마지막으로, 이건 웹 서버에 접근하는 것이기 때문에 트래픽이 엄청납니다! 이에 관해 완화 방법은 과제로 남기겠습니다. 글 쓰는게 정말 귀찮아서요.</p><hr><h1 id="깃허브"><a href="#깃허브" class="headerlink" title="깃허브"></a>깃허브</h1><p>전체적인 코드는 다음 주소에서 볼 수 있습니다.</p><p><a href="https://github.com/raravel/electron-code-push-example">https://github.com/raravel/electron-code-push-example</a></p><p>읽어주셔서 감사합니다.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://raravel.github.io/tags/electron/">electron</category>
      
      <category domain="https://raravel.github.io/tags/nodejs/">nodejs</category>
      
      <category domain="https://raravel.github.io/tags/codepush/">codepush</category>
      
      
      <comments>https://raravel.github.io/2021/07/21/20210721-1411/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FRIDA 사용법</title>
      <link>https://raravel.github.io/2021/06/23/20210623-1925/</link>
      <guid>https://raravel.github.io/2021/06/23/20210623-1925/</guid>
      <pubDate>Wed, 23 Jun 2021 19:25:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.&lt;/p&gt;
&lt;h1 id=&quot;개요&quot;&gt;&lt;a href=&quot;#개요&quot; class=&quot;headerlink&quot; title=&quot;개요&quot;&gt;&lt;/a&gt;개요&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;%5Bhttps:/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>이 글은 제가 카카오톡 봇 커뮤니티에 작성했던 글을 그대로 복사한 것입니다.</p><h1 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h1><p><img src="%5Bhttps://user-images.githubusercontent.com/28672888/178218826-03cda182-b8f5-4df5-9d5e-f0083acb9173.png%5D(https://postfiles.pstatic.net/MjAyMTA2MjNfMiAg/MDAxNjI0NDQzNDcxNTE0.Z137IB0QIboCi85AcjLEU11p5LZZoxj-VVd7iRRo5vsg.UpYrC5e03bzKwFWqH_zxePytKCaG6HS7y7jBDLsdIXcg.GIF.ifthe1201/giphy.gif?type=w773)"></p><p>안녕하세요. 그동안 카페 눈팅만 하다가 드디어 글을 쓰게 된 윤입니다.</p><p>카페 에디터가 스마트 에디터 3.0으로 바뀐 이후로 처음 쓰는 글이군요.</p><p>​</p><p>먼저, 해당 글을 쓰게 된 배경부터 알아봅시다. 몇 분이 제 블로그를 보셨을진 모르겠지만, 저는 타 플랫폼에서 봇 시스템을 구축했습니다. WEB 버전이 존재했기 때문에 쉬웠습니다. 그러다가 하게 된 것이 모든 API의 호출이 가능한 모듈을 만들기 시작했고, 결국엔 APP 버전에서만 지원하는 동작들을 구현하기 위해 후킹을 다짐했습니다.</p><p>​</p><p>분명 HTTPS 통신을 하는데, 일반적인 HTTPS 스니핑 도구는 패킷을 잡지 못 하더라고요. 왜 그런진 모르겠습니다.</p><p>어떻게든 비밀스러운 이 부분을 알고 싶었기 때문에 직접 소스를 보진 못 하겠고, 훔쳐보는 방식으로라도 주고받는 파라미터들을 보기 위해서,</p><p>​</p><p>오늘 알아볼 것은 Frida(프리다) 입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178223198-eac966d3-1a06-4614-80d6-2a2f2a167faf.png" alt="image"></p><p>변태처럼 앱이 어떻게 서버로 데이터를 넣어버리는지에 대한 관음을 아주 다양한 방법으로 할 수 있게 해주는 도구죠.</p><p>​</p><p>​</p><p>아. 참고로 저는 할 수 있는게 없습니다.</p><p>​</p><p>APK는 보통 자바, 또는 코틀린으로 짜죠. 그래서 디컴파일을 하면 자바 코드를 볼 수 있는 게 여럿 있습니다. 물론, 전 자바로 Hello World 찍는 것 조차 힘들어합니다. 안드로이드 구조 하나도 모릅니다.</p><p>​</p><p>Frida 라는 툴도 지금 처음 써봅니다. 해야지 해야지 고민하면서 문서만 몇 번 본게 답니다.</p><p>​</p><p>프리다는 파이썬으로 만들어졌나 봅니다. pip 를 통한 설치를 지원합니다. 물론, 파이썬도 못 합니다.</p><p>​</p><p>다행이도, 인젝션 언어중에 자바스크립트를 지원합니다. JS는 조금 할 줄 압니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178223310-af9f9e4d-8b00-42f3-b521-b19402d8d4e3.png" alt="얘 글을 믿어도 되는지 모르겠다."></p><p>제 개발환경은 다음과 같습니다. VMWare 에 리눅스를 설치한 상황이죠.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DISTRIB_ID=LinuxMint</span><br><span class="line">DISTRIB_RELEASE=19.2</span><br><span class="line">DISTRIB_CODENAME=tina</span><br><span class="line">DISTRIB_DESCRIPTION=&quot;Linux Mint 19.2 Tina&quot;</span><br><span class="line">NAME=&quot;Linux Mint&quot;</span><br><span class="line">VERSION=&quot;19.2 (Tina)&quot;</span><br><span class="line">ID=linuxmint</span><br><span class="line">ID_LIKE=ubuntu</span><br><span class="line">PRETTY_NAME=&quot;Linux Mint 19.2&quot;</span><br><span class="line">VERSION_ID=&quot;19.2&quot;</span><br><span class="line">HOME_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://forums.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;http://linuxmint-troubleshooting-guide.readthedocs.io/en/latest/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.linuxmint.com/&quot;</span><br><span class="line">VERSION_CODENAME=tina</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br></pre></td></tr></table></figure><p>그리고 안드로이드 스튜디오, AVD, ADB 를 설치한 상황입니다. 물론 스튜디오는 사용하지 않고 AVD, ADB 만 사용합니다.</p><hr><h1 id="💬-ADB-에-프리다-서버-설치하기"><a href="#💬-ADB-에-프리다-서버-설치하기" class="headerlink" title="💬 ADB 에 프리다 서버 설치하기"></a>💬 ADB 에 프리다 서버 설치하기</h1><p><a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a></p><p>이곳에서 <code>frida-server-&#123;ver&#125;-android-&#123;platform&#125;</code> 압축파일을 다운받습니다.</p><p>글 작성 당시에는 <code>frida-server-12.11.3-android-x86</code>를 다운받았습니다.</p><p>압축을 풀고, 나온 파일을 실행중인 안드로이드 애뮬레이터의 임시 폴더로 넣을겁니다.</p><p>​</p><p>넣기 전에, 애뮬레이터 쉘의 권한부터 얻습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb root</span><br></pre></td></tr></table></figure><p>한 줄이 끝입니다. 아무런 동작도 필요없이 권한을 얻었습니다.</p><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb push frida-server-12.11.3-android-x86 /data/local/tmp</span><br><span class="line">$ adb shell</span><br><span class="line">$ <span class="built_in">cd</span> /data/local/tmp</span><br></pre></td></tr></table></figure><p>파일을 <code>/data/local/tmp</code> 폴더에 넣습니다. 그리고 쉘에 접속해, 해당 폴더로 이동합니다.</p><p>​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 777 ./frida-server-12.11.3-android-x86</span><br></pre></td></tr></table></figure><p>​</p><p>파일에 실행권한을 줍니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./frida-server-12.11.3-android-x86 &amp;</span><br></pre></td></tr></table></figure><p>서버를 백그라운드로 실행시킵니다.</p><p>​</p><p>제 AVD 에는 플레이스토어가 안 보였으니 직접 APK 를 가져와서 위와 같은 방식으로 파일을 넣고 설치했습니다.</p><hr><h1 id="📪-프리다-CLI-명령어-설치하기"><a href="#📪-프리다-CLI-명령어-설치하기" class="headerlink" title="📪 프리다 CLI 명령어 설치하기"></a>📪 프리다 CLI 명령어 설치하기</h1><p>우리는 특정 앱만 후킹을 할겁니다. 그렇기 때문에 여러개 살아있는 프로세스 중 하나만 가져와서 후킹을 해야 하는 것이죠. 처음부터 끝까지 패키지를 사용해 프로그래밍 하는 방법도 있지만, 굳이 편하게 갈 수 있는 길을 돌아갈 필요는 없죠.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install frida-tools</span><br></pre></td></tr></table></figure><p>PIP 로 한 번에 설치할 수 있습니다.</p><p>설치했으면 명령어를 사용해서, 후킹할 프로세스 패키지 이름을 가져올 것입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida-ps -Ua</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178224048-2701f187-b89b-4af0-9850-1a31dbdb9a01.png" alt="실제 배포된 앱이기 때문에, 어차피 추후 나오겠지만 일단 가렸습니다."></p><h1 id="🌏-특정-함수가-호출되는-것을-후킹하기"><a href="#🌏-특정-함수가-호출되는-것을-후킹하기" class="headerlink" title="🌏 특정 함수가 호출되는 것을 후킹하기"></a>🌏 특정 함수가 호출되는 것을 후킹하기</h1><p>이제 frida-trace 명령어를 사용할 것입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224111-ad663f1a-175b-4990-9a75-1e603275e67e.png" alt="모바일을 위해 코드가 아니라 사진으로 올림"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida-trace -U -i <span class="string">&#x27;*search*&#x27;</span> -p 8300</span><br></pre></td></tr></table></figure><p>위 명령어로 search 함수가 동작이 호출되는 때를 확인할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224196-709eb64d-0db2-465f-ac4b-3de3dfae3b89.png" alt="후킹될 때 결과 출력"></p><p><img src="https://postfiles.pstatic.net/MjAyMTA2MjNfMTc1/MDAxNjI0NDQzNzU4NDEy.hY8ISyFKbjQP-yS2MJtfdKpcQsvzmGsWDepwGv3luUkg.Os2ID7rV-AyN-7g5jOypHmb58Cv4j0K19Qu32iUtfVMg.GIF.ifthe1201/giphy_(2).gif?type=w773"></p><p>근데 암호화가 되어있는 것인지, 이래서는 아무것도 확인할 수가 없습니다.</p><hr><h1 id="🚀-특정-함수에-본인-코드-삽입하기"><a href="#🚀-특정-함수에-본인-코드-삽입하기" class="headerlink" title="🚀 특정 함수에 본인 코드 삽입하기"></a>🚀 특정 함수에 본인 코드 삽입하기</h1><p>일단, 어떤 함수가 호출될 때 내 코드를 삽입하면 좋을지 알아봅시다.</p><p>아까 뽑아두었던 APK 파일을 가지고 언패킹을 해봅시다. </p><p><a href="https://github.com/skylot/jadx/releases/">https://github.com/skylot/jadx/releases/</a></p><p>저는 GUI 버전을 가지고, APK 파일을 선택하는 것만으로도 언패킹이 되었습니다.</p><p>WEB 으로 API 구조를 대충 알고 있기에, 쉽게 접근할 수 있는 API 호출 함수를 찾아 수정할 계획입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224406-b7bd156c-ff7a-44c2-bdfc-fd0e536825e2.png"></p><p>방송 정보를 가져오는 API 를 호출하는 함수입니다.</p><p>그리고 또 알아야 할건 해당 클래스 경로입니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178224462-88fd932f-7357-4ca3-95ee-b5d2392bf5cc.png" alt="열린 소스 파일에 적혀있습니다."></p><p><a href="https://frida.re/docs/javascript-api/">이곳</a>에 적힌 설명을 따라, 저 getLive 함수에 제가 원하는 동작을 하도록 해보았습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getLiveHook.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">RxClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;클래스 이름&quot;</span>);</span><br><span class="line">  <span class="title class_">RxClass</span>.<span class="property">getLive</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이후 다음 명령어를 이용하여 스크립트를 삽입하고, 해당 함수를 호출하게끔 앱을 동작시켰습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ frida -U --no-pause -l getLiveHook.js -p 8300</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/28672888/178224870-1ec047bb-999e-4c5a-9c89-4baf19abcd43.png"></p><p>원하는 출력은 나왔습니다. 그런데, 이후 에러가 발생하면서 앱 동작이 종료됩니다.</p><p>이러면 좀 더 정확한 동작을 확인할 수 없습니다.</p><p>​</p><p>제가 삽입한 스크립트 실행 후, 원래 동작까지 제대로 되었으면 좋겠습니다.</p><p>첨부한 문서를 보면 쉽게 답을 찾을 수 있었습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getLiveHook.js</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">RxClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;클래스 이름&quot;</span>);</span><br><span class="line">  <span class="title class_">RxClass</span>.<span class="property">getLive</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[id] ----------&#x27;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getLive</span>(id); <span class="comment">// &lt;-- 해당 코드 추가</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그리고 동작을 확인합니다.</p><p><img src="https://user-images.githubusercontent.com/28672888/178225020-47524572-79a1-42d2-8a5a-7401727a3b73.png"></p><p>결과적으로, 문제없이 잘 동작하는 앱에서 후킹만 성공하는 것을 확인하였습니다.</p><p><img src="https://postfiles.pstatic.net/MjAyMTA2MjNfMzAw/MDAxNjI0NDQzOTEyMTE4.G8y0FX3iubRd-CrdPyj9640JMFatoTrd2bN2AZ-f7XAg.RkvHawSOO3wKRUOFiYVSklRjPzNhGHCRMw_3A1ikf5Qg.GIF.ifthe1201/giphy_(3).gif?type=w773"></p><p>또 보죠.</p>]]></content:encoded>
      
      
      <category domain="https://raravel.github.io/categories/nodejs/">nodejs</category>
      
      
      <category domain="https://raravel.github.io/tags/javascript/">javascript</category>
      
      <category domain="https://raravel.github.io/tags/android/">android</category>
      
      <category domain="https://raravel.github.io/tags/%ED%95%B4%ED%82%B9/">해킹</category>
      
      <category domain="https://raravel.github.io/tags/frida/">frida</category>
      
      
      <comments>https://raravel.github.io/2021/06/23/20210623-1925/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
